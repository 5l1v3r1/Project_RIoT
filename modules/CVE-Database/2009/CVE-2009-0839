{Modified: 2009-10-27T01:24:10.157000, Published: 2009-03-31T14:24:45.827000, access: {authentication: NONE, complexity: LOW, vector: NETWORK}, capec: [{id: 10, name: Buffer Overflow via Environment Variables, prerequisites: The application uses environment variables.
An environment variable exposed to the user is vulnerable to a buffer overflow.
The vulnerable environment variable uses untrusted data.
Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer., related_weakness: [120, 302, 118, 119, 74, 99, 20, 680, 733, 697], solutions: Do not expose environment variable to the user.
Do not use untrusted data in your environment variables.
Use a language or compiler that performs automatic bounds checking
There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow., summary: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.}, {id: 100, name: Overflow Buffers, prerequisites: Targeted software performs buffer operations.
Targeted software inadequately performs bounds-checking on buffer operations.
Attacker has the capability to influence the input to buffer operations., related_weakness: [120, 119, 131, 129, 805, 19, 680], solutions: Use a language or compiler that performs automatic bounds checking.
Use secure functions not vulnerable to buffer overflow.
If you have to use dangerous functions, make sure that you do boundary checking.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution.
Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software., summary: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an attacker. As a consequence, an attacker is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the attackers' choice.}, {id: 14, name: Client-side Injection-induced Buffer Overflow, prerequisites: The targeted client software communicates with an external server.
The targeted client software has a buffer overflow vulnerability., related_weakness: [120, 353, 118, 119, 74, 20, 680, 697, 713], solutions: The client software should not install untrusted code from a non-authenticated server.
The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.
Perform input validation for length of buffer inputs.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Ensure all buffer uses are consistently bounds-checked.
Use OS-level preventative functionality. Not a complete solution., summary: This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service.}, {id: 24, name: Filter Failure through Buffer Overflow, prerequisites: Ability to control the length of data passed to an active filter., related_weakness: [120, 119, 118, 74, 20, 680, 733, 697], solutions: Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.
Pre-design: Use a language or compiler that performs automatic bounds checking.
Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Operational: Use OS-level preventative functionality. Not a complete solution.
Design: Use an abstraction library to abstract away risky APIs. Not a complete solution., summary: In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).}, {id: 42, name: MIME Conversion, prerequisites: The target system uses a mail server.
Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system., related_weakness: [120, 119, 74, 20], solutions: Stay up to date with third party vendor patches
From "Exploiting Software", please see reference below.
Use the sendmail restricted shell program (smrsh)
Use mail.local, summary: An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.}, {id: 44, name: Overflow Binary Resource File, prerequisites: Target software processes binary resource files.
Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file., related_weakness: [120, 119, 697, 713], solutions: Perform appropriate bounds checking on all buffers.
Design: Enforce principle of least privilege
Design: Static code analysis
Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes
Implementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host., summary: An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.}, {id: 45, name: Buffer Overflow via Symbolic Links, prerequisites: The attacker can create symbolic link on the target host.
The target host does not perform correct boundary checking while consuming data from a resources., related_weakness: [120, 285, 302, 118, 119, 74, 20, 680, 697], solutions: Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.
Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.
Pay attention to the resource pointed to by your symlink links (See attack pattern named "Forced Symlink race"), they can be replaced by malicious resources.
Always check the size of the input data before copying to a buffer.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution., summary: This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.}, {id: 46, name: Overflow Variables and Tags, prerequisites: The target program consumes user-controllable data in the form of tags or variables.
The target program does not perform sufficient boundary checking., related_weakness: [120, 118, 119, 74, 20, 680, 733, 697], solutions: Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution.
Do not trust input data from user. Validate all user input., summary: This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.}, {id: 47, name: Buffer Overflow via Parameter Expansion, prerequisites: The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.
The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is)., related_weakness: [120, 119, 118, 130, 131, 74, 20, 680, 697], solutions: Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system, summary: In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.}, {id: 8, name: Buffer Overflow in an API Call, prerequisites: The target host exposes an API to the user.
One or more API functions exposed by the target host has a buffer overflow vulnerability., related_weakness: [120, 119, 118, 74, 20, 680, 733, 697], solutions: Use a language or compiler that performs automatic bounds checking.
Use secure functions not vulnerable to buffer overflow.
If you have to use dangerous functions, make sure that you do boundary checking.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution., summary: This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.}, {id: 9, name: Buffer Overflow in Local Command-Line Utilities, prerequisites: The target host exposes a command-line utility to the user.
The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited., related_weakness: [120, 118, 119, 74, 20, 680, 733, 697], solutions: Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Operational: Use OS-level preventative functionality. Not a complete solution.
Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.
Do not unnecessarily expose services., summary: This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root.}], cvss: 10.0, cvss-time: 2009-03-31T15:48:00, cwe: CWE-119, id: CVE-2009-0839, impact: {availability: COMPLETE, confidentiality: COMPLETE, integrity: COMPLETE}, last-modified: 2018-10-10T15:31:40.923000, nessus: [{NASL family: Fedora Local Security Checks, NASL id: FEDORA_2009-3357.NASL, description: The releases contain fixes for issues discovered in an audit of the CGI by a 3rd party (tickets #2939, #2941, #2942, #2943 and #2944). The issues are detailed at: http://trac.osgeo.org/mapserver/ticket/2939 http://trac.osgeo.org/mapserver/ticket/2941 http://trac.osgeo.org/mapserver/ticket/2942 http://trac.osgeo.org/mapserver/ticket/2943 http://trac.osgeo.org/mapserver/ticket/2944 Also provided is support for RFC-56 that addresses tightening up the control of access to mapfiles and templates:
http://mapserver.org/development/rfc/ms-rfc-56.html

Note that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2018-11-20, plugin id: 37298, published: 2009-04-23, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=37298, title: Fedora 10 : mapserver-5.2.2-1.fc10 (2009-3357)}, {NASL family: CGI abuses, NASL id: MAPSERVER_5_2_2.NASL, description: The remote host is running MapServer, an open source Internet map server. The installed version of MapServer is affected by multiple flaws :

  - By creating a map file with overly long IMAGEPATH and/or     NAME attribute(s), it may be possible to trigger a     stack-based buffer overflow. (CVE-2009-0839)

  - It may be possible to trigger a heap-based buffer     overflow by sending a HTTP POST request with     'CONTENT_LENGTH' attribute set to '-1'. (CVE-2009-0840)     Note: According to some reports this issue might have     been incorrectly fixed, see references for more info.

  - It may be possible to create arbitrary files by     specifying file names to the 'id' parameter.
    (CVE-2009-0841)

  - Provided an attacker has privileges to create symlinks     on the file system, it may be possible to partially read     the contents of arbitrary files. (CVE-2009-0842)

  - Provided an attacker has knowledge of a valid map file,     it may be possible to determine if an arbitrary file     exists on the remote system. (CVE-2009-0843)

  - Sufficient boundary checks are not performed on 'id'     parameter in mapserver.c. An attacker may exploit     this issue to trigger a buffer overflow condition     resulting in arbitrary code execution on the remote     system. (CVE-2009-1176)

  - File maptemplate.c is affected by multiple stack-based     overflow issues. (CVE-2009-1177), last seen: 2019-02-21, modified: 2018-11-15, plugin id: 36074, published: 2009-04-02, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=36074, title: MapServer < 5.2.2 / 4.10.4 Multiple Flaws}, {NASL family: Fedora Local Security Checks, NASL id: FEDORA_2009-3383.NASL, description: The releases contain fixes for issues discovered in an audit of the CGI by a 3rd party (tickets #2939, #2941, #2942, #2943 and #2944). The issues are detailed at: http://trac.osgeo.org/mapserver/ticket/2939 http://trac.osgeo.org/mapserver/ticket/2941 http://trac.osgeo.org/mapserver/ticket/2942 http://trac.osgeo.org/mapserver/ticket/2943 http://trac.osgeo.org/mapserver/ticket/2944 Also provided is support for RFC-56 that addresses tightening up the control of access to mapfiles and templates:
http://mapserver.org/development/rfc/ms-rfc-56.html

Note that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2018-11-20, plugin id: 36091, published: 2009-04-07, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=36091, title: Fedora 9 : mapserver-5.2.2-1.fc9 (2009-3383)}, {NASL family: Debian Local Security Checks, NASL id: DEBIAN_DSA-1914.NASL, description: Several vulnerabilities have been discovered in mapserver, a CGI-based web framework to publish spatial data and interactive mapping applications. The Common Vulnerabilities and Exposures project identifies the following problems :

  - CVE-2009-0843     Missing input validation on a user-supplied map     queryfile name can be used by an attacker to check for     the existence of a specific file by using the queryfile     GET parameter and checking for differences in error     messages.

  - CVE-2009-0842     A lack of file type verification when parsing a map file     can lead to partial disclosure of content from arbitrary     files through parser error messages.

  - CVE-2009-0841     Due to missing input validation when saving map files     under certain conditions it is possible to perform     directory traversal attacks and to create arbitrary     files. NOTE: Unless the attacker is able to create     directories in the image path or there is already a     readable directory this doesn't affect installations on     Linux as the fopen() syscall will fail in case a sub     path is not readable.

  - CVE-2009-0839     It was discovered that mapserver is vulnerable to a     stack-based buffer overflow when processing certain GET     parameters. An attacker can use this to execute     arbitrary code on the server via crafted id parameters.

  - CVE-2009-0840     An integer overflow leading to a heap-based buffer     overflow when processing the Content-Length header of an     HTTP request can be used by an attacker to execute     arbitrary code via crafted POST requests containing     negative Content-Length values.

  - CVE-2009-2281     An integer overflow when processing HTTP requests can     lead to a heap-based buffer overflow. An attacker can     use this to execute arbitrary code either via crafted     Content-Length values or large HTTP request. This is     partly because of an incomplete fix for CVE-2009-0840., last seen: 2019-02-21, modified: 2018-11-10, plugin id: 44779, published: 2010-02-24, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=44779, title: Debian DSA-1914-1 : mapserver - several vulnerabilities}], ranking: [[{circl: 3}]], references: [http://lists.osgeo.org/pipermail/mapserver-users/2009-March/060600.html, http://trac.osgeo.org/mapserver/ticket/2944, http://www.debian.org/security/2009/dsa-1914, http://www.positronsecurity.com/advisories/2009-000.html, http://www.securityfocus.com/archive/1/502271/100/0/threaded, http://www.securityfocus.com/bid/34306, http://www.securitytracker.com/id?1021952, https://www.redhat.com/archives/fedora-package-announce/2009-April/msg00147.html, https://www.redhat.com/archives/fedora-package-announce/2009-April/msg00170.html], refmap: {bid: [34306], bugtraq: [20090330 Positron Security Advisory #2009-000: Multiple Vulnerabilities in MapServer v5.2.1 and v4.10.3], confirm: [http://trac.osgeo.org/mapserver/ticket/2944], debian: [DSA-1914], fedora: [FEDORA-2009-3357, FEDORA-2009-3383], misc: [http://www.positronsecurity.com/advisories/2009-000.html], mlist: [[mapserver-users] 20090326 MapServer 5.2.2 and 4.10.4 released with security fixes], sectrack: [1021952], secunia: [34520, 34603]}, summary: Stack-based buffer overflow in mapserv.c in mapserv in MapServer 4.x before 4.10.4 and 5.x before 5.2.2, when the server has a map with a long IMAGEPATH or NAME attribute, allows remote attackers to execute arbitrary code via a crafted id parameter in a query action., vulnerable_configuration: [{id: cpe:2.3:a:umn:mapserver:4.0, title: cpe:2.3:a:umn:mapserver:4.0}, {id: cpe:2.3:a:umn:mapserver:4.0:beta1, title: cpe:2.3:a:umn:mapserver:4.0:beta1}, {id: cpe:2.3:a:umn:mapserver:4.0:beta2, title: cpe:2.3:a:umn:mapserver:4.0:beta2}, {id: cpe:2.3:a:umn:mapserver:4.2:beta1, title: University of Minnesota Mapserver 4.2 beta1}, {id: cpe:2.3:a:umn:mapserver:4.4.0, title: University of Minnesota Mapserver 4.4.0}, {id: cpe:2.3:a:umn:mapserver:4.4.0:beta1, title: University of Minnesota Mapserver 4.4.0 beta1}, {id: cpe:2.3:a:umn:mapserver:4.4.0:beta2, title: University of Minnesota Mapserver 4.4.0 beta2}, {id: cpe:2.3:a:umn:mapserver:4.4.0:beta3, title: University of Minnesota Mapserver 4.4.0 beta3}, {id: cpe:2.3:a:umn:mapserver:4.6.0, title: University of Minnesota Mapserver 4.6.0}, {id: cpe:2.3:a:umn:mapserver:4.6.0:beta1, title: University of Minnesota Mapserver 4.6.0 beta1}, {id: cpe:2.3:a:umn:mapserver:4.6.0:beta2, title: University of Minnesota Mapserver 4.6.0 beta2}, {id: cpe:2.3:a:umn:mapserver:4.6.0:beta3, title: University of Minnesota Mapserver 4.6.0 beta3}, {id: cpe:2.3:a:umn:mapserver:4.6.0:rc1, title: University of Minnesota Mapserver 4.6.0 release candidate 1}, {id: cpe:2.3:a:umn:mapserver:4.8:beta1, title: University of Minnesota Mapserver 4.8 beta1}, {id: cpe:2.3:a:umn:mapserver:4.8:beta2, title: University of Minnesota Mapserver 4.8 beta2}, {id: cpe:2.3:a:umn:mapserver:4.8:beta3, title: University of Minnesota Mapserver 4.8 beta3}, {id: cpe:2.3:a:umn:mapserver:4.8:rc1, title: University of Minnesota Mapserver 4.8 release candidate 1}, {id: cpe:2.3:a:umn:mapserver:4.8:rc2, title: University of Minnesota Mapserver 4.8 release candidate 2}, {id: cpe:2.3:a:umn:mapserver:4.10:beta1, title: University of Minnesota Mapserver 4.10 beta1}, {id: cpe:2.3:a:umn:mapserver:4.10:beta2, title: University of Minnesota Mapserver 4.10 beta2}, {id: cpe:2.3:a:umn:mapserver:4.10:beta3, title: University of Minnesota Mapserver 4.10 beta3}, {id: cpe:2.3:a:umn:mapserver:4.10:rc1, title: University of Minnesota Mapserver 4.10 release candidate 1}, {id: cpe:2.3:a:umn:mapserver:4.10.0, title: University of Minnesota Mapserver 4.10.0}, {id: cpe:2.3:a:umn:mapserver:4.10.1, title: University of Minnesota Mapserver 4.10.1}, {id: cpe:2.3:a:umn:mapserver:4.10.2, title: University of Minnesota Mapserver 4.10.2}, {id: cpe:2.3:a:umn:mapserver:4.10.3, title: University of Minnesota Mapserver 4.10.3}, {id: cpe:2.3:a:umn:mapserver:5.0.0, title: University of Minnesota Mapserver 5.0.0}, {id: cpe:2.3:a:umn:mapserver:5.0.0:beta1, title: University of Minnesota Mapserver 5.0.0 beta1}, {id: cpe:2.3:a:umn:mapserver:5.0.0:beta2, title: University of Minnesota Mapserver 5.0.0 beta2}, {id: cpe:2.3:a:umn:mapserver:5.0.0:beta3, title: University of Minnesota Mapserver 5.0.0 beta3}, {id: cpe:2.3:a:umn:mapserver:5.0.0:beta4, title: University of Minnesota Mapserver 5.0.0 beta4}, {id: cpe:2.3:a:umn:mapserver:5.0.0:beta5, title: University of Minnesota Mapserver 5.0.0 beta5}, {id: cpe:2.3:a:umn:mapserver:5.0.0:beta6, title: University of Minnesota Mapserver 5.0.0 beta6}, {id: cpe:2.3:a:umn:mapserver:5.0.0:rc1, title: University of Minnesota Mapserver 5.0.0 release candidate 1}, {id: cpe:2.3:a:umn:mapserver:5.0.0:rc2, title: University of Minnesota Mapserver 5.0.0 release candidate 2}, {id: cpe:2.3:a:umn:mapserver:5.2.0, title: University of Minnesota Mapserver 5.2.0}, {id: cpe:2.3:a:umn:mapserver:5.2.0:beta1, title: University of Minnesota Mapserver 5.2.0 beta1}, {id: cpe:2.3:a:umn:mapserver:5.2.0:beta2, title: University of Minnesota Mapserver 5.2.0 beta2}, {id: cpe:2.3:a:umn:mapserver:5.2.0:beta3, title: University of Minnesota Mapserver 5.2.0 beta3}, {id: cpe:2.3:a:umn:mapserver:5.2.0:beta4, title: University of Minnesota Mapserver 5.2.0 beta4}, {id: cpe:2.3:a:umn:mapserver:5.2.0:rc1, title: University of Minnesota Mapserver 5.2.0 release candidate 1}, {id: cpe:2.3:a:umn:mapserver:5.2.1, title: University of Minnesota Mapserver 5.2.1}], vulnerable_configuration_cpe_2_2: [cpe:/a:umn:mapserver:4.0, cpe:/a:umn:mapserver:4.0:beta1, cpe:/a:umn:mapserver:4.0:beta2, cpe:/a:umn:mapserver:4.2:beta1, cpe:/a:umn:mapserver:4.4.0, cpe:/a:umn:mapserver:4.4.0:beta1, cpe:/a:umn:mapserver:4.4.0:beta2, cpe:/a:umn:mapserver:4.4.0:beta3, cpe:/a:umn:mapserver:4.6.0, cpe:/a:umn:mapserver:4.6.0:beta1, cpe:/a:umn:mapserver:4.6.0:beta2, cpe:/a:umn:mapserver:4.6.0:beta3, cpe:/a:umn:mapserver:4.6.0:rc1, cpe:/a:umn:mapserver:4.8:beta1, cpe:/a:umn:mapserver:4.8:beta2, cpe:/a:umn:mapserver:4.8:beta3, cpe:/a:umn:mapserver:4.8:rc1, cpe:/a:umn:mapserver:4.8:rc2, cpe:/a:umn:mapserver:4.10:beta1, cpe:/a:umn:mapserver:4.10:beta2, cpe:/a:umn:mapserver:4.10:beta3, cpe:/a:umn:mapserver:4.10:rc1, cpe:/a:umn:mapserver:4.10.0, cpe:/a:umn:mapserver:4.10.1, cpe:/a:umn:mapserver:4.10.2, cpe:/a:umn:mapserver:4.10.3, cpe:/a:umn:mapserver:5.0.0, cpe:/a:umn:mapserver:5.0.0:beta1, cpe:/a:umn:mapserver:5.0.0:beta2, cpe:/a:umn:mapserver:5.0.0:beta3, cpe:/a:umn:mapserver:5.0.0:beta4, cpe:/a:umn:mapserver:5.0.0:beta5, cpe:/a:umn:mapserver:5.0.0:beta6, cpe:/a:umn:mapserver:5.0.0:rc1, cpe:/a:umn:mapserver:5.0.0:rc2, cpe:/a:umn:mapserver:5.2.0, cpe:/a:umn:mapserver:5.2.0:beta1, cpe:/a:umn:mapserver:5.2.0:beta2, cpe:/a:umn:mapserver:5.2.0:beta3, cpe:/a:umn:mapserver:5.2.0:beta4, cpe:/a:umn:mapserver:5.2.0:rc1, cpe:/a:umn:mapserver:5.2.1]}
