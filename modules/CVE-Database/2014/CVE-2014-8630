{Modified: 2017-01-02T21:59:20.563000, Published: 2015-02-01T10:59:04.353000, access: {authentication: SINGLE_INSTANCE, complexity: LOW, vector: NETWORK}, capec: [{id: 11, name: Cause Web Server Misclassification, prerequisites: Web server software must rely on file name or file extension for processing., related_weakness: [69, 77], solutions: Implementation: Server routines should be determined by content not determined by filename or file extension., summary: An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.
This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.}, {id: 136, name: LDAP Injection, prerequisites: The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed., related_weakness: [77, 90, 20], solutions: Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.
Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application., summary: An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.}, {id: 15, name: Command Delimiters, prerequisites: Software's input validation or filtering must not detect and block presence of additional malicious command., related_weakness: [146, 77, 184, 78, 185, 93, 140, 157, 138, 154, 697, 713], solutions: Design: Perform whitelist validation against a positive specification for command length, type, and parameters.
Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account
Implementation: Perform input validation for all remote content.
Implementation: Use type conversions such as JDBC prepared statements., summary: An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.}, {id: 23, name: File System Function Injection, Content Based, prerequisites: The target software must consume files.
The attacker must have access to modify files that the target software will consume., related_weakness: [77, 23, 22, 713, 715], solutions: Design: Enforce principle of least privilege
Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)
Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.
Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.
Implementation: Virus scanning on host
Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin., summary: An attack of this type exploits the host's trust in executing remote content including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the attacker and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The attacker exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the attacker knows the standard handling routines and can identify vulnerabilities and entry points they can be exploited by otherwise seemingly normal content. Once the attack is executed, the attackers' program can access relative directories such as C:\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.}, {id: 43, name: Exploiting Multiple Input Interpretation Layers, prerequisites: User input is used to construct a command to be executed on the target system or as part of the file name.
Multiple parser passes are performed on the data supplied by the user., related_weakness: [171, 179, 181, 184, 183, 77, 78, 74, 20, 697, 707], solutions: An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.
Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.
Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system., summary: An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a "layer" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps.
The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application:
In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.}, {id: 6, name: Argument Injection, prerequisites: Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.
Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client., related_weakness: [77, 146, 184, 78, 185, 713, 697], solutions: Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.
Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.
Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise., summary: An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.}, {id: 75, name: Manipulating Writeable Configuration Files, prerequisites: Configuration files must be modifiable by the attacker, related_weakness: [349, 99, 77, 346, 353, 354, 713], solutions: Design: Enforce principle of least privilege
Design: Backup copies of all configuration files
Implementation: Integrity monitoring for configuration files
Implementation: Enforce audit logging on code and configuration promotion procedures.
Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD, summary: Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.}, {id: 76, name: Manipulating Input to File System Calls, prerequisites: Program must allow for user controlled variables to be applied directly to the filesystem, related_weakness: [23, 22, 73, 77, 346, 348, 285, 264, 272, 59, 74, 15, 715], solutions: Design: Enforce principle of least privilege.
Design: Ensure all input is validated, and does not contain file system commands
Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.
Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables., summary: An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.}], cvss: 6.5, cvss-time: 2016-09-06T07:51:02.577000, cwe: CWE-77, id: CVE-2014-8630, impact: {availability: PARTIAL, confidentiality: PARTIAL, integrity: PARTIAL}, nessus: [{NASL family: Fedora Local Security Checks, NASL id: FEDORA_2015-1699.NASL, description: This is a security update for Bugzilla which fixes two issues :

  - A user with editcomponents permissions could possibly     inject system commands in product names and possibly     other attributes.

  - Methods from imported modules could possibly be executed     using the WebService API.

The first issue is tracked as CVE-2014-8630. See https://www.bugzilla.org/security/4.0.15/ for all the details.

Note that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2015-10-19, plugin id: 81353, published: 2015-02-16, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=81353, title: Fedora 20 : bugzilla-4.2.13-1.fc20 (2015-1699)}, {NASL family: FreeBSD Local Security Checks, NASL id: FREEBSD_PKG_DC2D76DFA59511E4936320CF30E32F6D.NASL, description: Bugzilla Security Advisory Command Injection Some code in Bugzilla does not properly utilize 3 arguments form for open() and it is possible for an account with editcomponents permissions to inject commands into product names and other attributes. Information Leak Using the WebServices API, a user can possibly execute imported functions from other non-WebService modules. A whitelist has now been added that lists explicit methods that can be executed via the API., last seen: 2019-02-21, modified: 2018-11-10, plugin id: 81010, published: 2015-01-27, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=81010, title: FreeBSD : Bugzilla multiple security issues (dc2d76df-a595-11e4-9363-20cf30e32f6d)}, {NASL family: Fedora Local Security Checks, NASL id: FEDORA_2015-1713.NASL, description: This is a security update for Bugzilla which fixes two issues :

  - A user with editcomponents permissions could possibly     inject system commands in product names and possibly     other attributes.

  - Methods from imported modules could possibly be executed     using the WebService API.

The first issue is tracked as CVE-2014-8630. See https://www.bugzilla.org/security/4.0.15/ for all the details.

Note that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2015-10-19, plugin id: 81356, published: 2015-02-16, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=81356, title: Fedora 21 : bugzilla-4.4.8-1.fc21.1 (2015-1713)}, {NASL family: Gentoo Local Security Checks, NASL id: GENTOO_GLSA-201607-11.NASL, description: The remote host is affected by the vulnerability described in GLSA-201607-11 (Bugzilla: Multiple vulnerabilities)

    Multiple vulnerabilities have been discovered in Bugzilla. Please review       the CVE identifiers referenced below for details.
  Impact :

    Privileged account holders could execute system level commands, and the       new user process could be exploited to allow for the escalation of       privileges.
  Workaround :

    There is no known workaround at this time., last seen: 2019-02-21, modified: 2016-07-21, plugin id: 92481, published: 2016-07-21, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=92481, title: GLSA-201607-11 : Bugzilla: Multiple vulnerabilities}, {NASL family: CGI abuses, NASL id: BUGZILLA_5_0_RC1.NASL, description: According to its banner, the version of Bugzilla running on the remote host is potentially affected by the following vulnerabilities :

  - A command injection vulnerability exists due to a     failure to properly utilize the 3 arguments form for     open(). This allows an authenticated, remote attacker     with 'editcomponents' permission, to inject commands     into attributes. (CVE-2014-8630)

  - An information disclosure vulnerability exists in the     WebServices API. An attacker can execute imported     functions from non-WebServices modules.

Note that Nessus has not tested for these issues but has instead relied only on the application's self-reported version number., last seen: 2019-02-21, modified: 2018-06-13, plugin id: 81424, published: 2015-02-20, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=81424, title: Bugzilla < 4.0.16 / 4.2.12 / 4.4.7 / 5.0rc1 Multiple Vulnerabilities}, {NASL family: Mandriva Local Security Checks, NASL id: MANDRIVA_MDVSA-2015-030.NASL, description: Updated bugzilla packages fix security vulnerability :

Some code in Bugzilla does not properly utilize 3 arguments form for open() and it is possible for an account with editcomponents permissions to inject commands into product names and other attributes (CVE-2014-8630)., last seen: 2019-02-21, modified: 2018-07-19, plugin id: 81196, published: 2015-02-06, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=81196, title: Mandriva Linux Security Advisory : bugzilla (MDVSA-2015:030)}], ranking: [[{circl: 3}]], references: [http://advisories.mageia.org/MGASA-2015-0048.html, http://lists.fedoraproject.org/pipermail/package-announce/2015-February/149921.html, http://lists.fedoraproject.org/pipermail/package-announce/2015-February/149925.html, http://www.bugzilla.org/security/4.0.15/, http://www.mandriva.com/security/advisories?name=MDVSA-2015:030, https://bugzilla.mozilla.org/show_bug.cgi?id=1079065, https://security.gentoo.org/glsa/201607-11], refmap: {confirm: [http://advisories.mageia.org/MGASA-2015-0048.html, http://www.bugzilla.org/security/4.0.15/, https://bugzilla.mozilla.org/show_bug.cgi?id=1079065], fedora: [FEDORA-2015-1699, FEDORA-2015-1713], gentoo: [GLSA-201607-11], mandriva: [MDVSA-2015:030]}, summary: Bugzilla before 4.0.16, 4.1.x and 4.2.x before 4.2.12, 4.3.x and 4.4.x before 4.4.7, and 5.x before 5.0rc1 allows remote authenticated users to execute arbitrary commands by leveraging the editcomponents privilege and triggering crafted input to a two-argument Perl open call, as demonstrated by shell metacharacters in a product name., vulnerable_configuration: [{id: cpe:2.3:a:mozilla:bugzilla:4.0.16, title: Mozilla Bugzilla 4.0.16}, {id: cpe:2.3:a:mozilla:bugzilla:4.1, title: Mozilla Bugzilla 4.1}, {id: cpe:2.3:a:mozilla:bugzilla:4.1.1, title: Mozilla Bugzilla 4.1.1}, {id: cpe:2.3:a:mozilla:bugzilla:4.1.2, title: Mozilla Bugzilla 4.1.2}, {id: cpe:2.3:a:mozilla:bugzilla:4.1.3, title: Mozilla Bugzilla 4.1.3}, {id: cpe:2.3:a:mozilla:bugzilla:4.2, title: Mozilla Bugzilla 4.2}, {id: cpe:2.3:a:mozilla:bugzilla:4.2:rc1, title: Mozilla Bugzilla 4.2 Release Candidate 1}, {id: cpe:2.3:a:mozilla:bugzilla:4.2:rc2, title: Mozilla Bugzilla 4.2 Release Candidate 2}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.1, title: Mozilla Bugzilla 4.2.1}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.11, title: Mozilla Bugzilla 4.2.11}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.10, title: Mozilla Bugzilla 4.2.10}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.2, title: Mozilla Bugzilla 4.2.2}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.3, title: Mozilla Bugzilla 4.2.3}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.4, title: Mozilla Bugzilla 4.2.4}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.5, title: Mozilla Bugzilla 4.2.5}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.6, title: Mozilla Bugzilla 4.2.6}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.7, title: Mozilla Bugzilla 4.2.7}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.8, title: Mozilla Bugzilla 4.2.8}, {id: cpe:2.3:a:mozilla:bugzilla:4.2.9, title: Mozilla Bugzilla 4.2.9}, {id: cpe:2.3:a:mozilla:bugzilla:4.3, title: Mozilla Bugzilla 4.3}, {id: cpe:2.3:a:mozilla:bugzilla:4.3.1, title: Mozilla Bugzilla 4.3.1}, {id: cpe:2.3:a:mozilla:bugzilla:4.3.2, title: Mozilla Bugzilla 4.3.2}, {id: cpe:2.3:a:mozilla:bugzilla:4.3.3, title: Mozilla Bugzilla 4.3.3}, {id: cpe:2.3:a:mozilla:bugzilla:4.4, title: Mozilla Bugzilla 4.4}, {id: cpe:2.3:a:mozilla:bugzilla:4.4:rc1, title: Mozilla Bugzilla 4.4 release candidate 1}, {id: cpe:2.3:a:mozilla:bugzilla:4.4:rc2, title: Mozilla Bugzilla 4.4 release candidate 2}, {id: cpe:2.3:a:mozilla:bugzilla:4.4.1, title: Mozilla Bugzilla 4.4.1}, {id: cpe:2.3:a:mozilla:bugzilla:4.4.2, title: Mozilla Bugzilla 4.4.2}, {id: cpe:2.3:a:mozilla:bugzilla:4.4.3, title: Mozilla Bugzilla 4.4.3}, {id: cpe:2.3:a:mozilla:bugzilla:4.4.4, title: Mozilla Bugzilla 4.4.4}, {id: cpe:2.3:a:mozilla:bugzilla:4.4.5, title: Mozilla Bugzilla 4.4.5}, {id: cpe:2.3:a:mozilla:bugzilla:4.4.6, title: Mozilla Bugzilla 4.4.6}, {id: cpe:2.3:a:mozilla:bugzilla:4.5, title: Mozilla Bugzilla 4.5}, {id: cpe:2.3:a:mozilla:bugzilla:4.5.1, title: Mozilla Bugzilla 4.5.1}, {id: cpe:2.3:a:mozilla:bugzilla:4.5.2, title: Mozilla Bugzilla 4.5.2}, {id: cpe:2.3:a:mozilla:bugzilla:4.5.3, title: Mozilla Bugzilla 4.5.3}, {id: cpe:2.3:a:mozilla:bugzilla:4.5.4, title: Mozilla Bugzilla 4.5.4}, {id: cpe:2.3:a:mozilla:bugzilla:4.5.5, title: cpe:2.3:a:mozilla:bugzilla:4.5.5}, {id: cpe:2.3:a:mozilla:bugzilla:4.5.6, title: Mozilla Bugzilla 4.5.6}, {id: cpe:2.3:o:fedoraproject:fedora:20, title: Fedora 20}, {id: cpe:2.3:o:fedoraproject:fedora:21, title: Fedora 21}], vulnerable_configuration_cpe_2_2: [cpe:/a:mozilla:bugzilla:4.0.16, cpe:/a:mozilla:bugzilla:4.1, cpe:/a:mozilla:bugzilla:4.1.1, cpe:/a:mozilla:bugzilla:4.1.2, cpe:/a:mozilla:bugzilla:4.1.3, cpe:/a:mozilla:bugzilla:4.2, cpe:/a:mozilla:bugzilla:4.2:rc1, cpe:/a:mozilla:bugzilla:4.2:rc2, cpe:/a:mozilla:bugzilla:4.2.1, cpe:/a:mozilla:bugzilla:4.2.11, cpe:/a:mozilla:bugzilla:4.2.10, cpe:/a:mozilla:bugzilla:4.2.2, cpe:/a:mozilla:bugzilla:4.2.3, cpe:/a:mozilla:bugzilla:4.2.4, cpe:/a:mozilla:bugzilla:4.2.5, cpe:/a:mozilla:bugzilla:4.2.6, cpe:/a:mozilla:bugzilla:4.2.7, cpe:/a:mozilla:bugzilla:4.2.8, cpe:/a:mozilla:bugzilla:4.2.9, cpe:/a:mozilla:bugzilla:4.3, cpe:/a:mozilla:bugzilla:4.3.1, cpe:/a:mozilla:bugzilla:4.3.2, cpe:/a:mozilla:bugzilla:4.3.3, cpe:/a:mozilla:bugzilla:4.4, cpe:/a:mozilla:bugzilla:4.4:rc1, cpe:/a:mozilla:bugzilla:4.4:rc2, cpe:/a:mozilla:bugzilla:4.4.1, cpe:/a:mozilla:bugzilla:4.4.2, cpe:/a:mozilla:bugzilla:4.4.3, cpe:/a:mozilla:bugzilla:4.4.4, cpe:/a:mozilla:bugzilla:4.4.5, cpe:/a:mozilla:bugzilla:4.4.6, cpe:/a:mozilla:bugzilla:4.5, cpe:/a:mozilla:bugzilla:4.5.1, cpe:/a:mozilla:bugzilla:4.5.2, cpe:/a:mozilla:bugzilla:4.5.3, cpe:/a:mozilla:bugzilla:4.5.4, cpe:/a:mozilla:bugzilla:4.5.5, cpe:/a:mozilla:bugzilla:4.5.6, cpe:/o:fedoraproject:fedora:20, cpe:/o:fedoraproject:fedora:21]}
