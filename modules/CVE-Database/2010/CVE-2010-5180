{Modified: 2012-08-27T00:00:00, Published: 2012-08-25T17:55:03.837000, access: {authentication: NONE, complexity: HIGH, vector: LOCAL}, capec: [{id: 26, name: Leveraging Race Conditions, prerequisites: A resource is accessed/modified concurrently by multiple processes such that a race condition exists.
The attacker has the ability to modify the resource., related_weakness: [368, 363, 366, 370, 362, 662, 689, 667, 665], solutions: Use safe libraries to access resources such as files.
Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.
Use synchronization to control the flow of execution.
Use static analysis tools to find race conditions.
Pay attention to concurrency problems related to the access of resources., summary: This attack targets a race condition occurring when multiple processes access and manipulate the same resource concurrently and the outcome of the execution depends on the particular order in which the access takes place. The attacker can leverage a race condition by "running the race", modifying the resource and modifying the normal execution flow. For instance a race condition can occur while accessing a file, the attacker can trick the system by replacing the original file with his version and cause the system to read the malicious file.}, {id: 29, name: Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions, prerequisites: A resource is access/modified concurrently by multiple processes.
The attacker is able to modify resource.
A race condition exists while accessing a resource., related_weakness: [367, 368, 366, 370, 362, 662, 691, 663, 665], solutions: Use safe libraries to access resources such as files.
Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.
Use synchronization to control the flow of execution.
Use static analysis tools to find race conditions.
Pay attention to concurrency problems related to the access of resources., summary: This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. The typical example is the file access. The attacker can leverage a file access race condition by "running the race", meaning that he would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the attacker could do something such as replace the file and cause an escalation of privilege.}], cvss: 6.2, cvss-time: 2012-08-27T14:33:00, cwe: CWE-362, id: CVE-2010-5180, impact: {availability: COMPLETE, confidentiality: COMPLETE, integrity: COMPLETE}, ranking: [[{circl: 3}]], references: [http://archives.neohapsis.com/archives/bugtraq/2010-05/0026.html, http://archives.neohapsis.com/archives/fulldisclosure/2010-05/0066.html, http://countermeasures.trendmicro.eu/you-just-cant-trust-a-drunk/, http://matousec.com/info/advisories/khobe-8.0-earthquake-for-windows-desktop-security-software.php, http://matousec.com/info/articles/khobe-8.0-earthquake-for-windows-desktop-security-software.php, http://www.f-secure.com/weblog/archives/00001949.html, http://www.securityfocus.com/bid/39924, http://www.theregister.co.uk/2010/05/07/argument_switch_av_bypass/], refmap: {bid: [39924], bugtraq: [20100505 KHOBE - 8.0 earthquake for Windows desktop security software], fulldisc: [20100505 KHOBE - 8.0 earthquake for Windows desktop security software], misc: [http://countermeasures.trendmicro.eu/you-just-cant-trust-a-drunk/, http://matousec.com/info/advisories/khobe-8.0-earthquake-for-windows-desktop-security-software.php, http://matousec.com/info/articles/khobe-8.0-earthquake-for-windows-desktop-security-software.php, http://www.f-secure.com/weblog/archives/00001949.html, http://www.theregister.co.uk/2010/05/07/argument_switch_av_bypass/], osvdb: [67660]}, summary: ** DISPUTED ** Race condition in VBA32 Personal 3.12.12.4 on Windows XP allows local users to bypass kernel-mode hook handlers, and execute dangerous code that would otherwise be blocked by a handler but not blocked by signature-based malware detection, via certain user-space memory changes during hook-handler execution, aka an argument-switch attack or a KHOBE attack.  NOTE: this issue is disputed by some third parties because it is a flaw in a protection mechanism for situations where a crafted program has already begun to execute., vulnerable_configuration: [{id: cpe:2.3:a:anti-virus:virusblockada32:3.12.12.4:-:personal, title: anti-virus.by VirusBlockAda32 (VBA32) 3.12.12.4 Personal Edition}, {id: cpe:2.3:o:microsoft:windows_xp, title: Microsoft Windows XP}], vulnerable_configuration_cpe_2_2: [cpe:/a:anti-virus:virusblockada32:3.12.12.4:-:personal, cpe:/o:microsoft:windows_xp]}
