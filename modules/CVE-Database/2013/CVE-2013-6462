{Modified: 2014-04-19T00:44:34.437000, Published: 2014-01-09T13:55:04.167000, access: {authentication: NONE, complexity: MEDIUM, vector: NETWORK}, capec: [{id: 10, name: Buffer Overflow via Environment Variables, prerequisites: The application uses environment variables.
An environment variable exposed to the user is vulnerable to a buffer overflow.
The vulnerable environment variable uses untrusted data.
Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer., related_weakness: [120, 302, 118, 119, 74, 99, 20, 680, 733, 697], solutions: Do not expose environment variable to the user.
Do not use untrusted data in your environment variables.
Use a language or compiler that performs automatic bounds checking
There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow., summary: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.}, {id: 100, name: Overflow Buffers, prerequisites: Targeted software performs buffer operations.
Targeted software inadequately performs bounds-checking on buffer operations.
Attacker has the capability to influence the input to buffer operations., related_weakness: [120, 119, 131, 129, 805, 19, 680], solutions: Use a language or compiler that performs automatic bounds checking.
Use secure functions not vulnerable to buffer overflow.
If you have to use dangerous functions, make sure that you do boundary checking.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution.
Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software., summary: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an attacker. As a consequence, an attacker is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the attackers' choice.}, {id: 14, name: Client-side Injection-induced Buffer Overflow, prerequisites: The targeted client software communicates with an external server.
The targeted client software has a buffer overflow vulnerability., related_weakness: [120, 353, 118, 119, 74, 20, 680, 697, 713], solutions: The client software should not install untrusted code from a non-authenticated server.
The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.
Perform input validation for length of buffer inputs.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Ensure all buffer uses are consistently bounds-checked.
Use OS-level preventative functionality. Not a complete solution., summary: This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service.}, {id: 24, name: Filter Failure through Buffer Overflow, prerequisites: Ability to control the length of data passed to an active filter., related_weakness: [120, 119, 118, 74, 20, 680, 733, 697], solutions: Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.
Pre-design: Use a language or compiler that performs automatic bounds checking.
Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Operational: Use OS-level preventative functionality. Not a complete solution.
Design: Use an abstraction library to abstract away risky APIs. Not a complete solution., summary: In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).}, {id: 42, name: MIME Conversion, prerequisites: The target system uses a mail server.
Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system., related_weakness: [120, 119, 74, 20], solutions: Stay up to date with third party vendor patches
From "Exploiting Software", please see reference below.
Use the sendmail restricted shell program (smrsh)
Use mail.local, summary: An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.}, {id: 44, name: Overflow Binary Resource File, prerequisites: Target software processes binary resource files.
Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file., related_weakness: [120, 119, 697, 713], solutions: Perform appropriate bounds checking on all buffers.
Design: Enforce principle of least privilege
Design: Static code analysis
Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes
Implementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host., summary: An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.}, {id: 45, name: Buffer Overflow via Symbolic Links, prerequisites: The attacker can create symbolic link on the target host.
The target host does not perform correct boundary checking while consuming data from a resources., related_weakness: [120, 285, 302, 118, 119, 74, 20, 680, 697], solutions: Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.
Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.
Pay attention to the resource pointed to by your symlink links (See attack pattern named "Forced Symlink race"), they can be replaced by malicious resources.
Always check the size of the input data before copying to a buffer.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution., summary: This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.}, {id: 46, name: Overflow Variables and Tags, prerequisites: The target program consumes user-controllable data in the form of tags or variables.
The target program does not perform sufficient boundary checking., related_weakness: [120, 118, 119, 74, 20, 680, 733, 697], solutions: Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution.
Do not trust input data from user. Validate all user input., summary: This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.}, {id: 47, name: Buffer Overflow via Parameter Expansion, prerequisites: The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.
The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is)., related_weakness: [120, 119, 118, 130, 131, 74, 20, 680, 697], solutions: Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system, summary: In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.}, {id: 8, name: Buffer Overflow in an API Call, prerequisites: The target host exposes an API to the user.
One or more API functions exposed by the target host has a buffer overflow vulnerability., related_weakness: [120, 119, 118, 74, 20, 680, 733, 697], solutions: Use a language or compiler that performs automatic bounds checking.
Use secure functions not vulnerable to buffer overflow.
If you have to use dangerous functions, make sure that you do boundary checking.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution., summary: This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.}, {id: 9, name: Buffer Overflow in Local Command-Line Utilities, prerequisites: The target host exposes a command-line utility to the user.
The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited., related_weakness: [120, 118, 119, 74, 20, 680, 733, 697], solutions: Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Operational: Use OS-level preventative functionality. Not a complete solution.
Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.
Do not unnecessarily expose services., summary: This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root.}], cvss: 9.3, cvss-time: 2014-01-10T10:22:57.223000, cwe: CWE-119, id: CVE-2013-6462, impact: {availability: COMPLETE, confidentiality: COMPLETE, integrity: COMPLETE}, last-modified: 2017-08-28T21:33:58.700000, nessus: [{NASL family: SuSE Local Security Checks, NASL id: OPENSUSE-2014-45.NASL, description: -     U_CVE-2013-6462-unlimited-sscanf-overflows-stack-buffe.p     atch 

  - unlimited sscanf overflows stack buffer in     bdfReadCharacters() (CVE-2013-6462, bnc#854915), last seen: 2019-02-21, modified: 2018-11-10, plugin id: 75391, published: 2014-06-13, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=75391, title: openSUSE Security Update : libXfont (openSUSE-SU-2014:0073-1)}, {NASL family: Scientific Linux Local Security Checks, NASL id: SL_20140110_LIBXFONT_ON_SL5_X.NASL, description: A stack-based buffer overflow flaw was found in the way the libXfont library parsed Glyph Bitmap Distribution Format (BDF) fonts. A malicious, local user could exploit this issue to potentially execute arbitrary code with the privileges of the X.Org server.
(CVE-2013-6462)

All running X.Org server instances must be restarted for the update to take effect., last seen: 2019-02-21, modified: 2018-12-28, plugin id: 71910, published: 2014-01-12, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=71910, title: Scientific Linux Security Update : libXfont on SL5.x, SL6.x i386/x86_64}, {NASL family: SuSE Local Security Checks, NASL id: SUSE_11_XORG-X11-DEVEL-140108.NASL, description: This update fixes a stack-based buffer overflow in xorg-x11 in the function bdfReadCharacters(). CVE-2013-6462 has been assigned to this issue., last seen: 2019-02-21, modified: 2014-07-17, plugin id: 72456, published: 2014-02-12, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=72456, title: SuSE 11.2 / 11.3 Security Update : xorg-x11 (SAT Patch Numbers 8723 / 8724)}, {NASL family: Amazon Linux Local Security Checks, NASL id: ALA_ALAS-2014-282.NASL, description: A stack-based buffer overflow flaw was found in the way the libXfont library parsed Glyph Bitmap Distribution Format (BDF) fonts. A malicious, local user could exploit this issue to potentially execute arbitrary code with the privileges of the X.Org server.
(CVE-2013-6462), last seen: 2019-02-21, modified: 2018-04-18, plugin id: 72300, published: 2014-02-05, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=72300, title: Amazon Linux AMI : libXfont (ALAS-2014-282)}, {NASL family: Solaris Local Security Checks, NASL id: SOLARIS11_XORG_20140326.NASL, description: The remote Solaris system is missing necessary patches to address security updates :

  - Stack-based buffer overflow in the bdfReadCharacters     function in bitmap/ bdfread.c in X.Org libXfont 1.1     through 1.4.6 allows remote attackers to cause a denial     of service (crash) or possibly execute arbitrary code     via a long string in a character name in a BDF font     file. (CVE-2013-6462), last seen: 2019-02-21, modified: 2018-11-15, plugin id: 80820, published: 2015-01-19, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=80820, title: Oracle Solaris Third-Party Patch Update : xorg (cve_2013_6462_buffer_errors)}, {NASL family: Ubuntu Local Security Checks, NASL id: UBUNTU_USN-2078-1.NASL, description: It was discovered that libXfont incorrectly handled certain malformed BDF fonts. An attacker could use a specially crafted font file to cause libXfont to crash, or possibly execute arbitrary code in order to gain privileges. The default compiler options for affected releases should reduce the vulnerability to a denial of service.

Note that Tenable Network Security has extracted the preceding description block directly from the Ubuntu security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2018-12-01, plugin id: 71855, published: 2014-01-08, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=71855, title: Ubuntu 10.04 LTS / 12.04 LTS / 12.10 / 13.04 / 13.10 : libxfont vulnerability (USN-2078-1)}, {NASL family: Mandriva Local Security Checks, NASL id: MANDRIVA_MDVSA-2014-013.NASL, description: A vulnerability has been discovered and corrected in libxfont :

Stack-based buffer overflow in the bdfReadCharacters function in bitmap/bdfread.c in X.Org libXfont 1.1 through 1.4.6 allows remote attackers to cause a denial of service (crash) or possibly execute arbitrary code via a long string in a character name in a BDF font file (CVE-2013-6462).

The updated packages have been patched to correct this issue., last seen: 2019-02-21, modified: 2018-07-19, plugin id: 72081, published: 2014-01-22, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=72081, title: Mandriva Linux Security Advisory : libxfont (MDVSA-2014:013)}, {NASL family: CentOS Local Security Checks, NASL id: CENTOS_RHSA-2014-0018.NASL, description: Updated libXfont packages that fix one security issue are now available for Red Hat Enterprise Linux 5 and 6.

The Red Hat Security Response Team has rated this update as having important security impact. A Common Vulnerability Scoring System (CVSS) base score, which gives a detailed severity rating, is available from the CVE link in the References section.

The libXfont packages provide the X.Org libXfont runtime library.
X.Org is an open source implementation of the X Window System.

A stack-based buffer overflow flaw was found in the way the libXfont library parsed Glyph Bitmap Distribution Format (BDF) fonts. A malicious, local user could exploit this issue to potentially execute arbitrary code with the privileges of the X.Org server.
(CVE-2013-6462)

Users of libXfont should upgrade to these updated packages, which contain a backported patch to resolve this issue. All running X.Org server instances must be restarted for the update to take effect., last seen: 2019-02-21, modified: 2018-11-10, plugin id: 71901, published: 2014-01-12, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=71901, title: CentOS 5 / 6 : libXfont (CESA-2014:0018)}, {NASL family: FreeBSD Local Security Checks, NASL id: FREEBSD_PKG_28C575FA784E11E38249001CC0380077.NASL, description: freedesktop.org reports :

A BDF font file containing a longer than expected string can cause a buffer overflow on the stack. Testing in X servers built with Stack Protector restulted in an immediate crash when reading a user-proveded specially crafted font.

As libXfont is used to read user-specified font files in all X servers distributed by X.Org, including the Xorg server which is often run with root privileges or as setuid-root in order to access hardware, this bug may lead to an unprivileged user acquiring root privileges in some systems., last seen: 2019-02-21, modified: 2018-11-21, plugin id: 71874, published: 2014-01-09, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=71874, title: FreeBSD : libXfont -- Stack buffer overflow in parsing of BDF font files in libXfont (28c575fa-784e-11e3-8249-001cc0380077)}, {NASL family: Gentoo Local Security Checks, NASL id: GENTOO_GLSA-201402-23.NASL, description: The remote host is affected by the vulnerability described in GLSA-201402-23 (libXfont: Multiple vulnerabilities)

    Multiple vulnerabilities have been discovered in libXfont. Please review       the CVE identifiers referenced below for details.
  Impact :

    A local attacker could use a specially crafted file to gain privileges       or cause a Denial of Service condition.
  Workaround :

    There is no known workaround at this time., last seen: 2019-02-21, modified: 2018-07-12, plugin id: 72637, published: 2014-02-23, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=72637, title: GLSA-201402-23 : libXfont: Multiple vulnerabilities}, {NASL family: Misc., NASL id: ORACLE_SECURE_GLOBAL_DESKTOP_APR_2014_CPU.NASL, description: The remote host has a version of Oracle Secure Global Desktop that is version 4.63, 4.71, 5.0 or 5.1. It is, therefore, affected by the following vulnerabilities :

  - A buffer overflow flaw exists in the 'bdfReadCharacters'     function within 'bitmap/bdfread.c' of the included X.Org     libXfont. This could allow a remote attacker to cause a     denial of service attack or possibly execute arbitrary     code. (CVE-2013-6462)

  - A flaw exists with the Workspace Web Application. This     could allow a remote attacker to impact the integrity of     the application. Note this only affects versions     5.0 and 5.1 of Oracle Secure Global Desktop.
    (CVE-2014-2439)

  - A flaw exists with the Workspace Web Application. This     could allow a remote attacker to impact the     confidentiality and integrity of the application.
    (CVE-2014-2463)

Note that Nessus has not tested for these issues but has instead relied only on the application's self-reported patch information., last seen: 2019-02-21, modified: 2018-11-15, plugin id: 73596, published: 2014-04-17, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=73596, title: Oracle Secure Global Desktop Multiple Vulnerabilities (April 2014 CPU)}, {NASL family: OracleVM Local Security Checks, NASL id: ORACLEVM_OVMSA-2014-0080.NASL, description: The remote OracleVM system is missing necessary patches to address critical security updates :

  - CVE-2014-0209: integer overflow of allocations in font     metadata file parsing (bug 1163602, bug 1163601)

  - CVE-2014-0210: unvalidated length fields when parsing     xfs protocol replies (bug 1163602, bug 1163601)

  - CVE-2014-0211: integer overflows calculating memory     needs for xfs replies (bug 1163602, bug 1163601)

  - CVE-2013-6462.patch: sscanf overflow (bug 1049684)

  - sscanf-hardening.patch: Some other sscanf hardening     fixes (1049684), last seen: 2019-02-21, modified: 2018-07-24, plugin id: 79557, published: 2014-11-26, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=79557, title: OracleVM 3.3 : libXfont (OVMSA-2014-0080)}, {NASL family: Debian Local Security Checks, NASL id: DEBIAN_DSA-2838.NASL, description: It was discovered that a buffer overflow in the processing of Glyph Bitmap Distribution fonts (BDF) could result in the execution of arbitrary code., last seen: 2019-02-21, modified: 2018-11-10, plugin id: 71850, published: 2014-01-08, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=71850, title: Debian DSA-2838-1 : libxfont - buffer overflow}, {NASL family: Oracle Linux Local Security Checks, NASL id: ORACLELINUX_ELSA-2014-0018.NASL, description: From Red Hat Security Advisory 2014:0018 :

Updated libXfont packages that fix one security issue are now available for Red Hat Enterprise Linux 5 and 6.

The Red Hat Security Response Team has rated this update as having important security impact. A Common Vulnerability Scoring System (CVSS) base score, which gives a detailed severity rating, is available from the CVE link in the References section.

The libXfont packages provide the X.Org libXfont runtime library.
X.Org is an open source implementation of the X Window System.

A stack-based buffer overflow flaw was found in the way the libXfont library parsed Glyph Bitmap Distribution Format (BDF) fonts. A malicious, local user could exploit this issue to potentially execute arbitrary code with the privileges of the X.Org server.
(CVE-2013-6462)

Users of libXfont should upgrade to these updated packages, which contain a backported patch to resolve this issue. All running X.Org server instances must be restarted for the update to take effect., last seen: 2019-02-21, modified: 2018-07-18, plugin id: 71908, published: 2014-01-12, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=71908, title: Oracle Linux 5 / 6 : libxfont (ELSA-2014-0018)}, {NASL family: Slackware Local Security Checks, NASL id: SLACKWARE_SSA_2014-013-01.NASL, description: New libXfont packages are available for Slackware 13.0, 13.1, 13.37, 14.0, 14.1, and -current to fix a security issue., last seen: 2019-02-21, modified: 2019-01-02, plugin id: 71929, published: 2014-01-14, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=71929, title: Slackware 13.0 / 13.1 / 13.37 / 14.0 / 14.1 / current : libXfont (SSA:2014-013-01)}, {NASL family: Red Hat Local Security Checks, NASL id: REDHAT-RHSA-2014-0018.NASL, description: Updated libXfont packages that fix one security issue are now available for Red Hat Enterprise Linux 5 and 6.

The Red Hat Security Response Team has rated this update as having important security impact. A Common Vulnerability Scoring System (CVSS) base score, which gives a detailed severity rating, is available from the CVE link in the References section.

The libXfont packages provide the X.Org libXfont runtime library.
X.Org is an open source implementation of the X Window System.

A stack-based buffer overflow flaw was found in the way the libXfont library parsed Glyph Bitmap Distribution Format (BDF) fonts. A malicious, local user could exploit this issue to potentially execute arbitrary code with the privileges of the X.Org server.
(CVE-2013-6462)

Users of libXfont should upgrade to these updated packages, which contain a backported patch to resolve this issue. All running X.Org server instances must be restarted for the update to take effect., last seen: 2019-02-21, modified: 2018-11-10, plugin id: 71909, published: 2014-01-12, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=71909, title: RHEL 5 / 6 : libXfont (RHSA-2014:0018)}], ranking: [[{circl: 3}]], redhat: {advisories: [{bugzilla: {id: 1048044, title: CVE-2013-6462 libXfont: stack-based buffer overflow flaw when parsing Glyph Bitmap Distribution Format (BDF) fonts}, oval: {OR: [{AND: [{comment: Red Hat Enterprise Linux 5 is installed, oval: oval:com.redhat.rhba:tst:20070331001}, {OR: [{AND: [{comment: libXfont is earlier than 0:1.2.2-1.0.5.el5_10, oval: oval:com.redhat.rhsa:tst:20140018002}, {comment: libXfont is signed with Red Hat redhatrelease key, oval: oval:com.redhat.rhsa:tst:20070132003}]}, {AND: [{comment: libXfont-devel is earlier than 0:1.2.2-1.0.5.el5_10, oval: oval:com.redhat.rhsa:tst:20140018004}, {comment: libXfont-devel is signed with Red Hat redhatrelease key, oval: oval:com.redhat.rhsa:tst:20070132005}]}]}]}, {AND: [{OR: [{comment: Red Hat Enterprise Linux 6 Client is installed, oval: oval:com.redhat.rhba:tst:20111656001}, {comment: Red Hat Enterprise Linux 6 Server is installed, oval: oval:com.redhat.rhba:tst:20111656002}, {comment: Red Hat Enterprise Linux 6 Workstation is installed, oval: oval:com.redhat.rhba:tst:20111656003}, {comment: Red Hat Enterprise Linux 6 ComputeNode is installed, oval: oval:com.redhat.rhba:tst:20111656004}]}, {OR: [{AND: [{comment: libXfont is earlier than 0:1.4.5-3.el6_5, oval: oval:com.redhat.rhsa:tst:20140018010}, {comment: libXfont is signed with Red Hat redhatrelease2 key, oval: oval:com.redhat.rhsa:tst:20111154006}]}, {AND: [{comment: libXfont-devel is earlier than 0:1.4.5-3.el6_5, oval: oval:com.redhat.rhsa:tst:20140018012}, {comment: libXfont-devel is signed with Red Hat redhatrelease2 key, oval: oval:com.redhat.rhsa:tst:20111154008}]}]}]}]}, rhsa: {id: RHSA-2014:0018, released: 2014-01-10, severity: Important, title: RHSA-2014:0018: libXfont security update (Important)}}], rpms: [libXfont-0:1.2.2-1.0.5.el5_10, libXfont-devel-0:1.2.2-1.0.5.el5_10, libXfont-0:1.4.5-3.el6_5, libXfont-devel-0:1.4.5-3.el6_5]}, references: [http://cgit.freedesktop.org/xorg/lib/libXfont/commit/?id=4d024ac10f964f6bd372ae0dd14f02772a6e5f63, http://lists.opensuse.org/opensuse-updates/2014-01/msg00050.html, http://lists.opensuse.org/opensuse-updates/2014-01/msg00052.html, http://lists.x.org/archives/xorg-announce/2014-January/002389.html, http://rhn.redhat.com/errata/RHSA-2014-0018.html, http://seclists.org/oss-sec/2014/q1/33, http://www.debian.org/security/2014/dsa-2838, http://www.oracle.com/technetwork/topics/security/cpuapr2014-1972952.html, http://www.securityfocus.com/bid/64694, http://www.ubuntu.com/usn/USN-2078-1, https://exchange.xforce.ibmcloud.com/vulnerabilities/90123], refmap: {bid: [64694], confirm: [http://cgit.freedesktop.org/xorg/lib/libXfont/commit/?id=4d024ac10f964f6bd372ae0dd14f02772a6e5f63, http://www.oracle.com/technetwork/topics/security/cpuapr2014-1972952.html], debian: [DSA-2838], mlist: [[oss-security] 20140107 Fwd: X.Org Security Advisory: CVE-2013-6462: Stack buffer overflow in parsing of BDF font files in libXfont, [xorg-announce] 20140107 X.Org Security Advisory: CVE-2013-6462: Stack buffer overflow in parsing of BDF font files in libXfont], osvdb: [101842], secunia: [56240, 56336, 56357, 56371], suse: [openSUSE-SU-2014:0073, openSUSE-SU-2014:0075], ubuntu: [USN-2078-1], xf: [libxfont-cve20136462-bo(90123)]}, summary: Stack-based buffer overflow in the bdfReadCharacters function in bitmap/bdfread.c in X.Org libXfont 1.1 through 1.4.6 allows remote attackers to cause a denial of service (crash) or possibly execute arbitrary code via a long string in a character name in a BDF font file., the hacker news: [{id: THN:7C8341277DF73F1C81CB710E806AEDF2, last seen: 2018-01-27, modified: 2014-01-09, published: 2014-01-09, reporter: Sudhir K Bansal, source: https://thehackernews.com/2014/01/23-year-old-stack-overflow.html, title: 23-year-old Stack overflow vulnerability discovered in X11 Server}], vulnerable_configuration: [{id: cpe:2.3:a:x:libxfont:1.4.6, title: X.Org LibXFont 1.4.6}, {id: cpe:2.3:a:x:libxfont:1.4.5, title: X.Org LibXFont 1.4.5}, {id: cpe:2.3:a:x:libxfont:1.4.4, title: X.Org LibXFont 1.4.4}, {id: cpe:2.3:a:x:libxfont:1.4.3, title: X.Org LibXFont 1.4.3}, {id: cpe:2.3:a:x:libxfont:1.4.2, title: X.Org LibXFont 1.4.2}, {id: cpe:2.3:a:x:libxfont:1.4.1, title: X.Org LibXFont 1.4.1}, {id: cpe:2.3:a:x:libxfont:1.4.0, title: X.Org LibXFont 1.4.0}, {id: cpe:2.3:a:x:libxfont:1.3.4, title: X.Org LibXFont 1.3.4}, {id: cpe:2.3:a:x:libxfont:1.3.3, title: X.Org LibXFont 1.3.3}, {id: cpe:2.3:a:x:libxfont:1.3.2, title: X.Org LibXFont 1.3.2}, {id: cpe:2.3:a:x:libxfont:1.3.1, title: X.Org LibXFont 1.3.1}, {id: cpe:2.3:a:x:libxfont:1.3.0, title: X.Org LibXFont 1.3.0}, {id: cpe:2.3:a:x:libxfont:1.2.9, title: X.Org LibXFont 1.2.9}, {id: cpe:2.3:a:x:libxfont:1.2.8, title: X.Org LibXFont 1.2.8}, {id: cpe:2.3:a:x:libxfont:1.2.7, title: X.Org LibXFont 1.2.7}, {id: cpe:2.3:a:x:libxfont:1.2.6, title: X.Org LibXFont 1.2.6}, {id: cpe:2.3:a:x:libxfont:1.2.5, title: X.Org LibXFont 1.2.5}, {id: cpe:2.3:a:x:libxfont:1.2.4, title: X.Org LibXFont 1.2.4}, {id: cpe:2.3:a:x:libxfont:1.2.3, title: X.Org LibXFont 1.2.3}, {id: cpe:2.3:a:x:libxfont:1.2.2, title: X.Org LibXFont 1.2.2}, {id: cpe:2.3:a:x:libxfont:1.2.1, title: X.Org LibXFont 1.2.1}, {id: cpe:2.3:a:x:libxfont:1.2.0, title: X.Org LibXFont 1.2.0}, {id: cpe:2.3:a:x:libxfont:1.1.0, title: X.Org LibXFont 1.1.0}], vulnerable_configuration_cpe_2_2: [cpe:/a:x:libxfont:1.4.6, cpe:/a:x:libxfont:1.4.5, cpe:/a:x:libxfont:1.4.4, cpe:/a:x:libxfont:1.4.3, cpe:/a:x:libxfont:1.4.2, cpe:/a:x:libxfont:1.4.1, cpe:/a:x:libxfont:1.4.0, cpe:/a:x:libxfont:1.3.4, cpe:/a:x:libxfont:1.3.3, cpe:/a:x:libxfont:1.3.2, cpe:/a:x:libxfont:1.3.1, cpe:/a:x:libxfont:1.3.0, cpe:/a:x:libxfont:1.2.9, cpe:/a:x:libxfont:1.2.8, cpe:/a:x:libxfont:1.2.7, cpe:/a:x:libxfont:1.2.6, cpe:/a:x:libxfont:1.2.5, cpe:/a:x:libxfont:1.2.4, cpe:/a:x:libxfont:1.2.3, cpe:/a:x:libxfont:1.2.2, cpe:/a:x:libxfont:1.2.1, cpe:/a:x:libxfont:1.2.0, cpe:/a:x:libxfont:1.1.0]}
