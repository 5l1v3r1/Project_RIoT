{Modified: 2018-08-03T15:29:00.653000, Published: 2018-08-03T15:29:00.607000, capec: [{id: 1, name: Accessing Functionality Not Properly Constrained by ACLs, prerequisites: The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.
The various resources, or individual URLs, must be somehow discoverable by the attacker
The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource., related_weakness: [285, 732, 276, 693, 721, 434], solutions: In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic., summary: In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application or can run queries for data that he is otherwise not supposed to.}, {id: 122, name: Privilege Abuse, prerequisites: The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.
The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources., related_weakness: [732, 602, 434], solutions: , summary: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.}], cvss: 6.5, cwe: CWE-434, id: CVE-2018-14911, last-modified: 2018-10-10T11:04:45.703000, ranking: [[{circl: 3}]], references: [https://github.com/yxcmf/ukcms/issues/1], refmap: {misc: [https://github.com/yxcmf/ukcms/issues/1]}, summary: A file upload vulnerability exists in ukcms v1.1.7 and earlier. The vulnerability is due to the system not strictly filtering the file upload type. An attacker can exploit the vulnerability to upload a script Trojan to admin.php/admin/configset/index/group/upload.html to gain server control by composing a request for a .txt upload and then changing it to a .php upload. The attacker must have admin access to change the upload_file_ext (aka "Allow upload file suffix") setting, and must use "php,php" in this setting to bypass the "php" restriction., vulnerable_configuration: [{id: cpe:2.3:a:ukcms:ukcms:1.1.7, title: cpe:2.3:a:ukcms:ukcms:1.1.7}], vulnerable_configuration_cpe_2_2: [cpe:/a:ukcms:ukcms:1.1.7]}
