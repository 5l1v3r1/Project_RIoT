{Modified: 2016-12-14T11:53:36.290000, Published: 2016-12-10T21:59:14.280000, access: {authentication: SINGLE_INSTANCE, complexity: LOW, vector: NETWORK}, capec: [{id: 11, name: Cause Web Server Misclassification, prerequisites: Web server software must rely on file name or file extension for processing., related_weakness: [69, 77], solutions: Implementation: Server routines should be determined by content not determined by filename or file extension., summary: An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.
This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.}, {id: 136, name: LDAP Injection, prerequisites: The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed., related_weakness: [77, 90, 20], solutions: Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.
Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application., summary: An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.}, {id: 15, name: Command Delimiters, prerequisites: Software's input validation or filtering must not detect and block presence of additional malicious command., related_weakness: [146, 77, 184, 78, 185, 93, 140, 157, 138, 154, 697, 713], solutions: Design: Perform whitelist validation against a positive specification for command length, type, and parameters.
Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account
Implementation: Perform input validation for all remote content.
Implementation: Use type conversions such as JDBC prepared statements., summary: An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.}, {id: 23, name: File System Function Injection, Content Based, prerequisites: The target software must consume files.
The attacker must have access to modify files that the target software will consume., related_weakness: [77, 23, 22, 713, 715], solutions: Design: Enforce principle of least privilege
Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)
Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.
Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.
Implementation: Virus scanning on host
Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin., summary: An attack of this type exploits the host's trust in executing remote content including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the attacker and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The attacker exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the attacker knows the standard handling routines and can identify vulnerabilities and entry points they can be exploited by otherwise seemingly normal content. Once the attack is executed, the attackers' program can access relative directories such as C:\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.}, {id: 43, name: Exploiting Multiple Input Interpretation Layers, prerequisites: User input is used to construct a command to be executed on the target system or as part of the file name.
Multiple parser passes are performed on the data supplied by the user., related_weakness: [171, 179, 181, 184, 183, 77, 78, 74, 20, 697, 707], solutions: An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.
Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.
Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system., summary: An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a "layer" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps.
The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application:
In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.}, {id: 6, name: Argument Injection, prerequisites: Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.
Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client., related_weakness: [77, 146, 184, 78, 185, 713, 697], solutions: Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.
Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.
Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise., summary: An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.}, {id: 75, name: Manipulating Writeable Configuration Files, prerequisites: Configuration files must be modifiable by the attacker, related_weakness: [349, 99, 77, 346, 353, 354, 713], solutions: Design: Enforce principle of least privilege
Design: Backup copies of all configuration files
Implementation: Integrity monitoring for configuration files
Implementation: Enforce audit logging on code and configuration promotion procedures.
Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD, summary: Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.}, {id: 76, name: Manipulating Input to File System Calls, prerequisites: Program must allow for user controlled variables to be applied directly to the filesystem, related_weakness: [23, 22, 73, 77, 346, 348, 285, 264, 272, 59, 74, 15, 715], solutions: Design: Enforce principle of least privilege.
Design: Ensure all input is validated, and does not contain file system commands
Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.
Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.
Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables., summary: An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.}], cvss: 6.5, cvss-time: 2016-12-13T11:20:08.647000, cwe: CWE-77, id: CVE-2016-6609, impact: {availability: PARTIAL, confidentiality: PARTIAL, integrity: PARTIAL}, last-modified: 2018-07-07T21:29:00.567000, nessus: [{NASL family: FreeBSD Local Security Checks, NASL id: FREEBSD_PKG_EF70B201645D11E69CDC6805CA0B3D42.NASL, description: The phpmyadmin development team reports :

Weakness with cookie encryption

Multiple XSS vulnerabilities

Multiple XSS vulnerabilities

PHP code injection

Full path disclosure

SQL injection attack

Local file exposure

Local file exposure through symlinks with UploadDir

Path traversal with SaveDir and UploadDir

Multiple XSS vulnerabilities

SQL injection attack

SQL injection attack

Denial of service (DOS) attack in transformation feature

SQL injection attack as control user

Unvalidated data passed to unserialize()

DOS attack with forced persistent connections

Denial of service (DOS) attack by for loops

IPv6 and proxy server IP-based authentication rule circumvention

Detect if user is logged in

Bypass URL redirect protection

Referrer leak in url.php

Reflected File Download attack

ArbitraryServerRegexp bypass

Denial of service (DOS) attack by changing password to a very long string

Remote code execution vulnerability when run as CGI Summary Denial of service (DOS) attack with dbase extension

Remote code execution vulnerability when PHP is running with dbase extension, last seen: 2019-02-21, modified: 2018-11-10, plugin id: 93024, published: 2016-08-18, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=93024, title: FreeBSD : phpmyadmin -- multiple vulnerabilities (ef70b201-645d-11e6-9cdc-6805ca0b3d42)}, {NASL family: SuSE Local Security Checks, NASL id: OPENSUSE-2016-1021.NASL, description: phpMyAdmin was updated to version 4.4.15.8 (2016-08-16) to fix the following issues :

  - Upstream changelog for 4.4.15.8 :

  - Improve session cookie code for openid.php and     signon.php example files

  - Full path disclosure in openid.php and signon.php     example files

  - Unsafe generation of BlowfishSecret (when not supplied     by the user)

  - Referrer leak when phpinfo is enabled

  - Use HTTPS for wiki links

  - Improve SSL certificate handling

  - Fix full path disclosure in debugging code

  - Administrators could trigger SQL injection attack     against users

  - other fixes

  - Remove Swekey support

  - Security fixes: https://www.phpmyadmin.net/security/

  - Weaknesses with cookie encryption see PMASA-2016-29     (CVE-2016-6606, CWE-661)

  - Multiple XSS vulnerabilities see PMASA-2016-30     (CVE-2016-6607, CWE-661)

  - Multiple XSS vulnerabilities see PMASA-2016-31     (CVE-2016-6608, CWE-661)

  - PHP code injection see PMASA-2016-32 (CVE-2016-6609,     CWE-661)

  - Full path disclosure see PMASA-2016-33 (CVE-2016-6610,     CWE-661)

  - SQL injection attack see PMASA-2016-34 (CVE-2016-6611,     CWE-661)

  - Local file exposure through LOAD DATA LOCAL INFILE see     PMASA-2016-35 (CVE-2016-6612, CWE-661)

  - Local file exposure through symlinks with UploadDir see     PMASA-2016-36 (CVE-2016-6613, CWE-661)

  - Path traversal with SaveDir and UploadDir see     PMASA-2016-37 (CVE-2016-6614, CWE-661)

  - Multiple XSS vulnerabilities see PMASA-2016-38     (CVE-2016-6615, CWE-661)

  - SQL injection vulnerability as control user see     PMASA-2016-39 (CVE-2016-6616, CWE-661)

  - SQL injection vulnerability see PMASA-2016-40     (CVE-2016-6617, CWE-661)

  - Denial-of-service attack through transformation feature     see PMASA-2016-41 (CVE-2016-6618, CWE-661)

  - SQL injection vulnerability as control user see     PMASA-2016-42 (CVE-2016-6619, CWE-661)

  - Verify data before unserializing see PMASA-2016-43     (CVE-2016-6620, CWE-661)

  - SSRF in setup script see PMASA-2016-44 (CVE-2016-6621,     CWE-661)

  - Denial-of-service attack with     ['AllowArbitraryServer'] = true and persistent     connections see PMASA-2016-45 (CVE-2016-6622, CWE-661)

  - Denial-of-service attack by using for loops see     PMASA-2016-46 (CVE-2016-6623, CWE-661)

  - Possible circumvention of IP-based allow/deny rules with     IPv6 and proxy server see PMASA-2016-47 (CVE-2016-6624,     CWE-661)

  - Detect if user is logged in see PMASA-2016-48     (CVE-2016-6625, CWE-661)

  - Bypass URL redirection protection see PMASA-2016-49     (CVE-2016-6626, CWE-661)

  - Referrer leak see PMASA-2016-50 (CVE-2016-6627, CWE-661)

  - Reflected File Download see PMASA-2016-51     (CVE-2016-6628, CWE-661)

  - ArbitraryServerRegexp bypass see PMASA-2016-52     (CVE-2016-6629, CWE-661)

  - Denial-of-service attack by entering long password see     PMASA-2016-53 (CVE-2016-6630, CWE-661)

  - Remote code execution vulnerability when running as CGI     see PMASA-2016-54 (CVE-2016-6631, CWE-661)

  - Denial-of-service attack when PHP uses dbase extension     see PMASA-2016-55 (CVE-2016-6632, CWE-661)

  - Remove tode execution vulnerability when PHP uses dbase     extension see PMASA-2016-56 (CVE-2016-6633, CWE-661), last seen: 2019-02-21, modified: 2016-12-21, plugin id: 93212, published: 2016-08-30, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=93212, title: openSUSE Security Update : phpMyAdmin (openSUSE-2016-1021)}, {NASL family: Debian Local Security Checks, NASL id: DEBIAN_DLA-1415.NASL, description: Several vulnerabilities were found in phpMyAdmin, the web-based MySQL administration interface, including SQL injection attacks, denial of service, arbitrary code execution, cross-site scripting, server-side request forgery, authentication bypass, and file system traversal.

For Debian 8 'Jessie', these problems have been fixed in version 4:4.2.12-2+deb8u3.

We recommend that you upgrade your phpmyadmin packages.

NOTE: Tenable Network Security has extracted the preceding description block directly from the DLA security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2018-08-08, plugin id: 110945, published: 2018-07-09, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=110945, title: Debian DLA-1415-1 : phpmyadmin security update}, {NASL family: Debian Local Security Checks, NASL id: DEBIAN_DLA-626.NASL, description: Phpmyadmin, a web administration tool for MySQL, had several vulnerabilities reported.

CVE-2016-6606

A pair of vulnerabilities were found affecting the way cookies are stored.

The decryption of the username/password is vulnerable to a padding oracle attack. The can allow an attacker who has access to a user's browser cookie file to decrypt the username and password.

A vulnerability was found where the same initialization vector is used to hash the username and password stored in the phpMyAdmin cookie. If a user has the same password as their username, an attacker who examines the browser cookie can see that they are the same &mdash; but the attacker can not directly decode these values from the cookie as it is still hashed.

CVE-2016-6607

Cross site scripting vulnerability in the replication feature

CVE-2016-6609

A specially crafted database name could be used to run arbitrary PHP commands through the array export feature.

CVE-2016-6611

A specially crafted database and/or table name can be used to trigger a SQL injection attack through the SQL export functionality.

CVE-2016-6612

A user can exploit the LOAD LOCAL INFILE functionality to expose files on the server to the database system.

CVE-2016-6613

A user can specially craft a symlink on disk, to a file which phpMyAdmin is permitted to read but the user is not, which phpMyAdmin will then expose to the user.

CVE-2016-6614

A vulnerability was reported with the %u username replacement functionality of the SaveDir and UploadDir features. When the username substitution is configured, a specially crafted user name can be used to circumvent restrictions to traverse the file system.

CVE-2016-6620

A vulnerability was reported where some data is passed to the PHP unserialize() function without verification that it's valid serialized data. Due to how the PHP function operates, unserialization can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this.
Therefore, a malicious user may be able to manipulate the stored data in a way to exploit this weakness.

CVE-2016-6622

An unauthenticated user is able to execute a denial of service attack by forcing persistent connections when phpMyAdmin is running with ['AllowArbitraryServer']=true;.

CVE-2016-6623

A malicious authorized user can cause a denial of service attack on a server by passing large values to a loop.

CVE-2016-6624

A vulnerability was discovered where, under certain circumstances, it may be possible to circumvent the phpMyAdmin IP-based authentication rules. When phpMyAdmin is used with IPv6 in a proxy server environment, and the proxy server is in the allowed range but the attacking computer is not allowed, this vulnerability can allow the attacking computer to connect despite the IP rules.

CVE-2016-6630

An authenticated user can trigger a denial of service attack by entering a very long password at the change password dialog.

CVE-2016-6631

A vulnerability was discovered where a user can execute a remote code execution attack against a server when phpMyAdmin is being run as a CGI application. Under certain server configurations, a user can pass a query string which is executed as a command-line argument by shell scripts.

For Debian 7 'Wheezy', these problems have been fixed in version 3.4.11.1-2+deb7u6.

We recommend that you upgrade your phpmyadmin packages.

NOTE: Tenable Network Security has extracted the preceding description block directly from the DLA security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2018-07-10, plugin id: 93566, published: 2016-09-19, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=93566, title: Debian DLA-626-1 : phpmyadmin security update}, {NASL family: CGI abuses, NASL id: PHPMYADMIN_PMASA_2016_29.NASL, description: According to its self-reported version number, the phpMyAdmin application hosted on the remote web server is 4.0.x prior to 4.0.10.17, 4.4.x prior to 4.4.15.8, or 4.6.x prior to 4.6.4. It is, therefore, affected by the following vulnerabilities :

  - An information disclosure vulnerability exists due to     the use of an algorithm that is vulnerable to padding     oracle attacks. An unauthenticated, remote attacker can     exploit this to decrypt information without the key,     resulting in the disclosure of usernames and passwords.
    (CVE-2016-6606)

  - A cross-site scripting (XSS) vulnerability exists in the     replication_gui.lib.php script due to improper     validation of user-supplied input to the 'username' and     'hostname' parameters. An unauthenticated, remote     attacker can exploit this, via a specially crafted     request, to execute arbitrary script code in a user's     browser session. (CVE-2016-6607)

  - A cross-site scripting (XSS) vulnerability exists in the     database privilege check functionality and the remove     partitioning functionality due to improper validation of     user-supplied input. An unauthenticated, remote attacker     can exploit this, via a specially crafted request, to     execute arbitrary script code in a user's browser     session. Note that this vulnerability only affects 4.6.x     versions. (CVE-2016-6608)

  - A remote command execution vulnerability exists in the     ExportPhparray.class.php script due to improper     validation of user-supplied input passed via database     names. An authenticated, remote attacker can exploit     this to execute arbitrary PHP commands. (CVE-2016-6609)

  - An information disclosure vulnerability exists in the     plugin_interface.lib.php script due to improper handling     of errors when creating non-existent classes. An     authenticated, remote attacker can exploit this to     disclose the installation path. (CVE-2016-6610)

  - A SQL injection vulnerability exists in the     ExportSql.class.php script due to improper sanitization     of user-supplied input to database and table names. An     authenticated, remote attacker can exploit this to     manipulate SQL queries in the back-end database,     resulting in the manipulation and disclosure of     arbitrary data. (CVE-2016-6611)

  - An information disclosure vulnerability exists in the     LOAD LOCAL INFILE functionality that allows an     authenticated, remote attacker to expose files on the     server to the database system. (CVE-2016-6612)

  - An information disclosure vulnerability exists due to     insecure creation of temporary files. A local attacker     can exploit this, via a symlink attack, to disclose     arbitrary files. (CVE-2016-6613)

  - A directory traversal vulnerability exists in the     Util.class.php script due to improper sanitization of     user-supplied input when handling the %u username     replacement functionality of the SaveDir and UploadDir     features. An unauthenticated, remote attacker can     exploit this, via a specially crafted request, to     disclose arbitrary files. (CVE-2016-6614)

  - Multiple cross-site scripting (XSS) vulnerabilities     exist due to improper validation of user-supplied input.
    An unauthenticated, remote attacker can exploit these,     via a specially crafted request, to execute arbitrary     script code in a user's browser session. Note that these     vulnerabilities do not affect 4.0.x versions.
    (CVE-2016-6615)

  - A SQL injection vulnerability exists due to improper     sanitization of user-supplied input when handling user     group queries. An authenticated, remote attacker can     exploit this to manipulate SQL queries in the back-end     database, resulting in the manipulation and disclosure     of arbitrary data. Note that this vulnerability does not     affect 4.0.x versions. (CVE-2016-6616)

  - A SQL injection vulnerability exists in the     display_export.lib.php script due to improper     sanitization of user-supplied input when handling     database and table names. An authenticated, remote     attacker can exploit this to manipulate SQL queries in     the back-end database, resulting in the manipulation and     disclosure of arbitrary data. Note that this     vulnerability only affects 4.6.x versions.
    (CVE-2016-6617)

  - A denial of service vulnerability exists in the     transformation_wrapper.php script due to improper     scaling of image dimensions. An unauthenticated, remote     attacker can exploit this to cause a denial of service     condition. (CVE-2016-6618)

  - A SQL injection vulnerability exists in the user     interface preference feature due to improper     sanitization of user-supplied input. An authenticated,     remote attacker can exploit this to manipulate SQL     queries in the back-end database, resulting in the     manipulation and disclosure of arbitrary data.
    (CVE-2016-6619)

  - A remote code execution vulnerability exists in the     unserialize() function due to improper validation of     user-supplied data. An unauthenticated, remote attacker     can exploit this to execute arbitrary code.
    (CVE-2016-6620)

  - A denial of service vulnerability exists when the     AllowArbitraryServer option is enabled that allows an     unauthenticated, remote attacker to cause a denial of     service condition by forcing a persistent connection.
    (CVE-2016-6622)

  - A denial of service vulnerability exists due to improper     handling of looped larger values. An authenticated,     remote attacker can exploit this to cause a denial of     service condition. (CVE-2016-6623)

  - A security bypass vulnerability exists in the     ip_allow_deny.lib.php script that allows an     unauthenticated, remote attacker to bypass IP-based     authentication rules. (CVE-2016-6624)

  - An information disclosure vulnerability exists that     allows an unauthenticated, remote attacker to determine     whether a user is logged in or not. (CVE-2016-6625)

  - A cross-site redirection vulnerability exists in the     core.lib.php script due to a failure to validate     user-supplied input. An unauthenticated, remote attacker     can exploit this, by convincing a user to follow a     specially crafted link, to redirect the user to an     arbitrary website. (CVE-2016-6626)

  - An information disclosure vulnerability exists in the     url.php script due to improper handling of HTTP headers.
    An unauthenticated, remote attacker can exploit this to     disclose host location information. (CVE-2016-6627)

  - A flaw exists in the file_echo.php script that allows an     unauthenticated, remote attacker to cause a different     user to download a specially crafted SVG file.
    (CVE-2016-6628)

  - A flaw exists in the ArbitraryServerRegexp configuration     directive that allows an unauthenticated, remote     attacker to reuse certain cookie values and bypass     intended server definition limits. (CVE-2016-6629)

  - A denial of service vulnerability exists in the     user_password.php script due to improper handling of an     overly long password. An unauthenticated, remote     attacker can exploit this to cause a denial of service     condition. (CVE-2016-6630)

  - A remote code execution vulnerability exists in the     generator_plugin.sh script due to improper handling of     query strings. An unauthenticated, remote attacker can     exploit this to execute arbitrary code. (CVE-2016-6631)

  - A denial of service vulnerability exists in the dbase     extension in the ImportShp.class.php script due to a     failure to delete temporary files during the import of     ESRI files. An unauthenticated, remote attacker can     exploit this to cause a denial of service condition.
    (CVE-2016-6632)

  - A remote code execution vulnerability exists in the     dbase extension due to improper handling of SHP imports.
    An unauthenticated, remote attacker can exploit this to     execute arbitrary code. (CVE-2016-6633)

Note that Nessus has not attempted to exploit these issues but has instead relied only on the application's self-reported version number., last seen: 2019-02-21, modified: 2018-07-24, plugin id: 95027, published: 2016-11-21, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=95027, title: phpMyAdmin 4.0.x < 4.0.10.17 / 4.4.x < 4.4.15.8 / 4.6.x < 4.6.4 Multiple Vulnerabilities (PMASA-2016-29 - PMASA-2016-56)}, {NASL family: SuSE Local Security Checks, NASL id: OPENSUSE-2016-1027.NASL, description: This phpMyAdmin update to version 4.4.15.8 fixes the following issues :

Security issues fixed :

  - Improve session cookie code for openid.php and     signon.php example files

  - Full path disclosure in openid.php and signon.php     example files

  - Unsafe generation of BlowfishSecret (when not supplied     by the user)

  - Referrer leak when phpinfo is enabled

  - Use HTTPS for wiki links

  - Improve SSL certificate handling

  - Fix full path disclosure in debugging code

  - Administrators could trigger SQL injection attack     against users

  - Weaknesses with cookie encryption see PMASA-2016-29     (CVE-2016-6606, CWE-661)

  - Multiple XSS vulnerabilities see PMASA-2016-30     (CVE-2016-6607, CWE-661)

  - Multiple XSS vulnerabilities see PMASA-2016-31     (CVE-2016-6608, CWE-661)

  - PHP code injection see PMASA-2016-32 (CVE-2016-6609,     CWE-661)

  - Full path disclosure see PMASA-2016-33 (CVE-2016-6610,     CWE-661)

  - SQL injection attack see PMASA-2016-34 (CVE-2016-6611,     CWE-661)

  - Local file exposure through LOAD DATA LOCAL INFILE see     PMASA-2016-35 (CVE-2016-6612, CWE-661)

  - Local file exposure through symlinks with UploadDir see     PMASA-2016-36 (CVE-2016-6613, CWE-661)

  - Path traversal with SaveDir and UploadDir see     PMASA-2016-37 (CVE-2016-6614, CWE-661)

  - Multiple XSS vulnerabilities see PMASA-2016-38     (CVE-2016-6615, CWE-661)

  - SQL injection vulnerability as control user see     PMASA-2016-39 (CVE-2016-6616, CWE-661)

  - SQL injection vulnerability see PMASA-2016-40     (CVE-2016-6617, CWE-661)

  - Denial-of-service attack through transformation feature     see PMASA-2016-41 (CVE-2016-6618, CWE-661)

  - SQL injection vulnerability as control user see     PMASA-2016-42 (CVE-2016-6619, CWE-661)

  - Verify data before unserializing see PMASA-2016-43     (CVE-2016-6620, CWE-661)

  - SSRF in setup script see PMASA-2016-44 (CVE-2016-6621,     CWE-661)

  - Denial-of-service attack with     ['AllowArbitraryServer'] = true and persistent     connections see PMASA-2016-45 (CVE-2016-6622, CWE-661)

  - Denial-of-service attack by using for loops see     PMASA-2016-46 (CVE-2016-6623, CWE-661)

  - Possible circumvention of IP-based allow/deny rules with     IPv6 and proxy server see PMASA-2016-47 (CVE-2016-6624,     CWE-661)

  - Detect if user is logged in see PMASA-2016-48     (CVE-2016-6625, CWE-661)

  - Bypass URL redirection protection see PMASA-2016-49     (CVE-2016-6626, CWE-661)

  - Referrer leak see PMASA-2016-50 (CVE-2016-6627, CWE-661)

  - Reflected File Download see PMASA-2016-51     (CVE-2016-6628, CWE-661)

  - ArbitraryServerRegexp bypass see PMASA-2016-52     (CVE-2016-6629, CWE-661)

  - Denial-of-service attack by entering long password see     PMASA-2016-53 (CVE-2016-6630, CWE-661)

  - Remote code execution vulnerability when running as CGI     see PMASA-2016-54 (CVE-2016-6631, CWE-661)

  - Denial-of-service attack when PHP uses dbase extension     see PMASA-2016-55 (CVE-2016-6632, CWE-661)

  - Remove tode execution vulnerability when PHP uses dbase     extension see PMASA-2016-56 (CVE-2016-6633, CWE-661), last seen: 2019-02-21, modified: 2016-12-21, plugin id: 93214, published: 2016-08-30, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=93214, title: openSUSE Security Update : phpMyAdmin (openSUSE-2016-1027)}, {NASL family: Gentoo Local Security Checks, NASL id: GENTOO_GLSA-201701-32.NASL, description: The remote host is affected by the vulnerability described in GLSA-201701-32 (phpMyAdmin: Multiple vulnerabilities)

    Multiple vulnerabilities have been discovered in phpMyAdmin. Please       review the CVE identifiers referenced below for details.
  Impact :

    A authenticated remote attacker could exploit these vulnerabilities to       execute arbitrary PHP Code, inject SQL code, or to conduct Cross-Site       Scripting attacks.
    In certain configurations, an unauthenticated remote attacker could       cause a Denial of Service condition.
  Workaround :

    There is no known workaround at this time., last seen: 2019-02-21, modified: 2018-06-19, plugin id: 96426, published: 2017-01-12, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=96426, title: GLSA-201701-32 : phpMyAdmin: Multiple vulnerabilities}], ranking: [[{circl: 3}]], references: [http://www.securityfocus.com/bid/94112, https://lists.debian.org/debian-lts-announce/2018/07/msg00006.html, https://security.gentoo.org/glsa/201701-32, https://www.phpmyadmin.net/security/PMASA-2016-32], refmap: {bid: [94112], confirm: [https://www.phpmyadmin.net/security/PMASA-2016-32], gentoo: [GLSA-201701-32], mlist: [[debian-lts-announce] 20180706 [SECURITY] [DLA 1415-1] phpmyadmin security update]}, summary: An issue was discovered in phpMyAdmin. A specially crafted database name could be used to run arbitrary PHP commands through the array export feature. All 4.6.x versions (prior to 4.6.4), 4.4.x versions (prior to 4.4.15.8), and 4.0.x versions (prior to 4.0.10.17) are affected., vulnerable_configuration: [{id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.0, title: phpMyAdmin 4.4.0}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1, title: phpMyAdmin 4.4.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1, title: phpMyAdmin 4.4.1.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2, title: phpMYAdmin 4.4.2}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3, title: phpMyAdmin 4.4.3}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4, title: phpMyAdmin 4.4.4}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5, title: phpMyAdmin 4.4.5}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6, title: phpMyAdmin 4.4.6}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1, title: phpMyAdmin 4.4.6.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7, title: phpMyAdmin 4.4.7}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8, title: phpMyAdmin 4.4.8}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9, title: phpMyAdmin 4.4.9}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10, title: phpMyAdmin 4.4.10}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11, title: phpMyAdmin 4.4.11}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12, title: phpMyAdmin 4.4.12}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13, title: phpMyAdmin 4.4.13}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1, title: phpMyAdmin 4.4.13.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14, title: phpMYAdmin 4.4.14}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1, title: phpMYAdmin 4.4.14.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15, title: phpMYAdmin 4.4.15}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1, title: phpMyAdmin 4.4.15.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2, title: phpMyAdmin 4.4.15.2}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3, title: phpMyAdmin 4.4.15.3}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.4, title: phpMyAdmin 4.4.15.4}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.5, title: phpMyAdmin 4.4.15.5}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.6, title: phpMyAdmin 4.4.15.6}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.7, title: phpMYAdmin 4.4.15.7}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0, title: phpMYAdmin 4.0.0}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.1, title: phpMYAdmin 4.0.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.2, title: phpMYAdmin 4.0.2}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.3, title: phpMYAdmin 4.0.3}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4, title: phpMYAdmin 4.0.4}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4.1, title: phpMYAdmin 4.0.4.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4.2, title: phpMYAdmin 4.0.4.2}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.5, title: phpMYAdmin 4.0.5}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.6, title: phpMYAdmin 4.0.6}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.7, title: phpMYAdmin 4.0.7}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.8, title: phpMYAdmin 4.0.8}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.9, title: phpMYAdmin 4.0.9}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10, title: phpMYAdmin 4.0.10}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.1, title: phpMyAdmin 4.0.10.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.2, title: phpMYAdmin 4.0.10.2}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.3, title: phpMyAdmin 4.0.10.3}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.4, title: phpMyAdmin 4.0.10.4}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.5, title: phpMYAdmin 4.0.10.5}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.6, title: phpMyAdmin 4.0.10.6}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.7, title: phpMyAdmin 4.0.10.7}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.8, title: phpMyAdmin 4.0.10.8}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.9, title: phpMyAdmin 4.0.10.9}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.10, title: phpMyAdmin 4.0.10.10}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.11, title: phpMyAdmin 4.0.10.11}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.12, title: phpMyAdmin 4.0.10.12}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.13, title: phpMyAdmin 4.0.10.13}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.14, title: phpMyAdmin 4.0.10.14}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.15, title: phpMyAdmin 4.0.10.15}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.16, title: phpMYAdmin 4.0.10.16}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0, title: phpMYAdmin 4.6.0}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.1, title: phpMYAdmin 4.6.1}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.2, title: phpMYAdmin 4.6.2}, {id: cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.3, title: phpMYAdmin 4.6.3}], vulnerable_configuration_cpe_2_2: [cpe:/a:phpmyadmin:phpmyadmin:4.4.0, cpe:/a:phpmyadmin:phpmyadmin:4.4.1, cpe:/a:phpmyadmin:phpmyadmin:4.4.1.1, cpe:/a:phpmyadmin:phpmyadmin:4.4.2, cpe:/a:phpmyadmin:phpmyadmin:4.4.3, cpe:/a:phpmyadmin:phpmyadmin:4.4.4, cpe:/a:phpmyadmin:phpmyadmin:4.4.5, cpe:/a:phpmyadmin:phpmyadmin:4.4.6, cpe:/a:phpmyadmin:phpmyadmin:4.4.6.1, cpe:/a:phpmyadmin:phpmyadmin:4.4.7, cpe:/a:phpmyadmin:phpmyadmin:4.4.8, cpe:/a:phpmyadmin:phpmyadmin:4.4.9, cpe:/a:phpmyadmin:phpmyadmin:4.4.10, cpe:/a:phpmyadmin:phpmyadmin:4.4.11, cpe:/a:phpmyadmin:phpmyadmin:4.4.12, cpe:/a:phpmyadmin:phpmyadmin:4.4.13, cpe:/a:phpmyadmin:phpmyadmin:4.4.13.1, cpe:/a:phpmyadmin:phpmyadmin:4.4.14, cpe:/a:phpmyadmin:phpmyadmin:4.4.14.1, cpe:/a:phpmyadmin:phpmyadmin:4.4.15, cpe:/a:phpmyadmin:phpmyadmin:4.4.15.1, cpe:/a:phpmyadmin:phpmyadmin:4.4.15.2, cpe:/a:phpmyadmin:phpmyadmin:4.4.15.3, cpe:/a:phpmyadmin:phpmyadmin:4.4.15.4, cpe:/a:phpmyadmin:phpmyadmin:4.4.15.5, cpe:/a:phpmyadmin:phpmyadmin:4.4.15.6, cpe:/a:phpmyadmin:phpmyadmin:4.4.15.7, cpe:/a:phpmyadmin:phpmyadmin:4.0.0, cpe:/a:phpmyadmin:phpmyadmin:4.0.1, cpe:/a:phpmyadmin:phpmyadmin:4.0.2, cpe:/a:phpmyadmin:phpmyadmin:4.0.3, cpe:/a:phpmyadmin:phpmyadmin:4.0.4, cpe:/a:phpmyadmin:phpmyadmin:4.0.4.1, cpe:/a:phpmyadmin:phpmyadmin:4.0.4.2, cpe:/a:phpmyadmin:phpmyadmin:4.0.5, cpe:/a:phpmyadmin:phpmyadmin:4.0.6, cpe:/a:phpmyadmin:phpmyadmin:4.0.7, cpe:/a:phpmyadmin:phpmyadmin:4.0.8, cpe:/a:phpmyadmin:phpmyadmin:4.0.9, cpe:/a:phpmyadmin:phpmyadmin:4.0.10, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.1, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.2, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.3, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.4, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.5, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.6, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.7, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.8, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.9, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.10, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.11, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.12, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.13, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.14, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.15, cpe:/a:phpmyadmin:phpmyadmin:4.0.10.16, cpe:/a:phpmyadmin:phpmyadmin:4.6.0, cpe:/a:phpmyadmin:phpmyadmin:4.6.1, cpe:/a:phpmyadmin:phpmyadmin:4.6.2, cpe:/a:phpmyadmin:phpmyadmin:4.6.3]}
