{Modified: 2016-11-28T14:08:17.610000, Published: 2012-07-25T06:42:35.710000, access: {authentication: NONE, complexity: MEDIUM, vector: ADJACENT_NETWORK}, capec: [{id: 10, name: Buffer Overflow via Environment Variables, prerequisites: The application uses environment variables.
An environment variable exposed to the user is vulnerable to a buffer overflow.
The vulnerable environment variable uses untrusted data.
Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer., related_weakness: [120, 302, 118, 119, 74, 99, 20, 680, 733, 697], solutions: Do not expose environment variable to the user.
Do not use untrusted data in your environment variables.
Use a language or compiler that performs automatic bounds checking
There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow., summary: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.}, {id: 100, name: Overflow Buffers, prerequisites: Targeted software performs buffer operations.
Targeted software inadequately performs bounds-checking on buffer operations.
Attacker has the capability to influence the input to buffer operations., related_weakness: [120, 119, 131, 129, 805, 19, 680], solutions: Use a language or compiler that performs automatic bounds checking.
Use secure functions not vulnerable to buffer overflow.
If you have to use dangerous functions, make sure that you do boundary checking.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution.
Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software., summary: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an attacker. As a consequence, an attacker is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the attackers' choice.}, {id: 14, name: Client-side Injection-induced Buffer Overflow, prerequisites: The targeted client software communicates with an external server.
The targeted client software has a buffer overflow vulnerability., related_weakness: [120, 353, 118, 119, 74, 20, 680, 697, 713], solutions: The client software should not install untrusted code from a non-authenticated server.
The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.
Perform input validation for length of buffer inputs.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Ensure all buffer uses are consistently bounds-checked.
Use OS-level preventative functionality. Not a complete solution., summary: This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service.}, {id: 24, name: Filter Failure through Buffer Overflow, prerequisites: Ability to control the length of data passed to an active filter., related_weakness: [120, 119, 118, 74, 20, 680, 733, 697], solutions: Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.
Pre-design: Use a language or compiler that performs automatic bounds checking.
Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Operational: Use OS-level preventative functionality. Not a complete solution.
Design: Use an abstraction library to abstract away risky APIs. Not a complete solution., summary: In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).}, {id: 42, name: MIME Conversion, prerequisites: The target system uses a mail server.
Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system., related_weakness: [120, 119, 74, 20], solutions: Stay up to date with third party vendor patches
From "Exploiting Software", please see reference below.
Use the sendmail restricted shell program (smrsh)
Use mail.local, summary: An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.}, {id: 44, name: Overflow Binary Resource File, prerequisites: Target software processes binary resource files.
Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file., related_weakness: [120, 119, 697, 713], solutions: Perform appropriate bounds checking on all buffers.
Design: Enforce principle of least privilege
Design: Static code analysis
Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes
Implementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host., summary: An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the attacker access to the execution stack and execute arbitrary code in the target process. This attack pattern is a variant of standard buffer overflow attacks using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The attacker is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application, for the victim to download. The attacker then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.}, {id: 45, name: Buffer Overflow via Symbolic Links, prerequisites: The attacker can create symbolic link on the target host.
The target host does not perform correct boundary checking while consuming data from a resources., related_weakness: [120, 285, 302, 118, 119, 74, 20, 680, 697], solutions: Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.
Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.
Pay attention to the resource pointed to by your symlink links (See attack pattern named "Forced Symlink race"), they can be replaced by malicious resources.
Always check the size of the input data before copying to a buffer.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution., summary: This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.}, {id: 46, name: Overflow Variables and Tags, prerequisites: The target program consumes user-controllable data in the form of tags or variables.
The target program does not perform sufficient boundary checking., related_weakness: [120, 118, 119, 74, 20, 680, 733, 697], solutions: Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution.
Do not trust input data from user. Validate all user input., summary: This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.}, {id: 47, name: Buffer Overflow via Parameter Expansion, prerequisites: The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.
The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is)., related_weakness: [120, 119, 118, 130, 131, 74, 20, 680, 697], solutions: Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system, summary: In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.}, {id: 8, name: Buffer Overflow in an API Call, prerequisites: The target host exposes an API to the user.
One or more API functions exposed by the target host has a buffer overflow vulnerability., related_weakness: [120, 119, 118, 74, 20, 680, 733, 697], solutions: Use a language or compiler that performs automatic bounds checking.
Use secure functions not vulnerable to buffer overflow.
If you have to use dangerous functions, make sure that you do boundary checking.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Use OS-level preventative functionality. Not a complete solution., summary: This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.}, {id: 9, name: Buffer Overflow in Local Command-Line Utilities, prerequisites: The target host exposes a command-line utility to the user.
The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited., related_weakness: [120, 118, 119, 74, 20, 680, 733, 697], solutions: Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.
Use a language or compiler that performs automatic bounds checking.
Use an abstraction library to abstract away risky APIs. Not a complete solution.
Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.
Operational: Use OS-level preventative functionality. Not a complete solution.
Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.
Do not unnecessarily expose services., summary: This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root.}], cvss: 5.7, cvss-time: 2012-07-25T10:19:00, cwe: CWE-119, id: CVE-2012-3570, impact: {availability: COMPLETE, confidentiality: NONE, integrity: NONE}, nessus: [{NASL family: Mandriva Local Security Checks, NASL id: MANDRIVA_MDVSA-2012-115.NASL, description: Multiple vulnerabilities has been discovered and corrected in ISC DHCP :

An unexpected client identifier parameter can cause the ISC DHCP daemon to segmentation fault when running in DHCPv6 mode, resulting in a denial of service to further client requests. In order to exploit this condition, an attacker must be able to send requests to the DHCP server (CVE-2012-3570).

An error in the handling of malformed client identifiers can cause a DHCP server running affected versions (see Impact) to enter a state where further client requests are not processed and the server process loops endlessly, consuming all available CPU cycles. Under normal circumstances this condition should not be triggered, but a non-conforming or malicious client could deliberately trigger it in a vulnerable server. In order to exploit this condition an attacker must be able to send requests to the DHCP server (CVE-2012-3571).

Two memory leaks have been found and fixed in ISC DHCP. Both are reproducible when running in DHCPv6 mode (with the -6 command-line argument.) The first leak is confirmed to only affect servers operating in DHCPv6 mode, but based on initial code analysis the second may theoretically affect DHCPv4 servers (though this has not been demonstrated.) (CVE-2012-3954).

The updated packages have been upgraded to the latest version (4.2.4-P1) which is not affected by these issues., last seen: 2019-02-21, modified: 2019-01-02, plugin id: 61967, published: 2012-09-06, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=61967, title: Mandriva Linux Security Advisory : dhcp (MDVSA-2012:115)}, {NASL family: FreeBSD Local Security Checks, NASL id: FREEBSD_PKG_C7FA3618D5FF11E190A2000C299B62E1.NASL, description: ISC reports :

An unexpected client identifier parameter can cause the ISC DHCP daemon to segmentation fault when running in DHCPv6 mode, resulting in a denial of service to further client requests. In order to exploit this condition, an attacker must be able to send requests to the DHCP server.

An error in the handling of malformed client identifiers can cause a DHCP server running affected versions (see 'Impact') to enter a state where further client requests are not processed and the server process loops endlessly, consuming all available CPU cycles. Under normal circumstances this condition should not be triggered, but a non-conforming or malicious client could deliberately trigger it in a vulnerable server. In order to exploit this condition an attacker must be able to send requests to the DHCP server.

Two memory leaks have been found and fixed in ISC DHCP. Both are reproducible when running in DHCPv6 mode (with the -6 command-line argument.) The first leak is confirmed to only affect servers operating in DHCPv6 mode, but based on initial code analysis the second may theoretically affect DHCPv4 servers (though this has not been demonstrated.), last seen: 2019-02-21, modified: 2018-12-19, plugin id: 60115, published: 2012-07-25, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=60115, title: FreeBSD : isc-dhcp -- multiple vulnerabilities (c7fa3618-d5ff-11e1-90a2-000c299b62e1)}, {NASL family: Fedora Local Security Checks, NASL id: FEDORA_2012-11079.NASL, description: This is security bugfix release fixing several vulnerabilities.

Note that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2018-11-28, plugin id: 61387, published: 2012-08-02, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=61387, title: Fedora 17 : dhcp-4.2.4-9.P1.fc17 (2012-11079)}, {NASL family: Fedora Local Security Checks, NASL id: FEDORA_2012-11110.NASL, description: This is security bugfix release fixing several vulnerabilities.

Note that Tenable Network Security has extracted the preceding description block directly from the Fedora security advisory. Tenable has attempted to automatically clean and format it as much as possible without introducing additional issues., last seen: 2019-02-21, modified: 2015-10-20, plugin id: 61442, published: 2012-08-07, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=61442, title: Fedora 16 : dhcp-4.2.3-11.P2.fc16 (2012-11110)}, {NASL family: SuSE Local Security Checks, NASL id: SUSE_11_DHCP-120730.NASL, description: This update provides dhcp 4.2.4-p1, which fixes the dhcpv6 server crashing while accessing the lease on heap and provides the following additional fixes :

  - Security fixes :

  - Previously the server code was relaxed to allow packets     with zero length client ids to be processed. Under some     situations use of zero length client ids can cause the     server to go into an infinite loop. As such ids are not     valid according to RFC 2132 section 9.14 the server no     longer accepts them. Client ids with a length of 1 are     also invalid but the server still accepts them in order     to minimize disruption. The restriction will likely be     tightened in the future to disallow ids with a length of     1. (ISC-Bugs #29851, CVE-2012-3571)

  - When attempting to convert a DUID from a client id     option into a hardware address handle unexpected client     ids properly. (ISC-Bugs #29852, CVE-2012-3570)

  - A pair of memory leaks were found and fixed. (ISC-Bugs     #30024, (CVE-2012-3954) )

  - Further upstream fixes :

  - Moved lease file check to a separate action so it is not     used in restart -- it can fail when the daemon rewrites     the lease causing a restart failure then.

  - Request dhcp6.sntp-servers in /etc/dhclient6.conf and     forward to netconfig for processing.

  - Rotate the lease file when running in v6 mode. (ISC-Bugs     #24887)

  - Fixed the code that checks if an address the server is     planning to hand out is in a reserved range. This would     appear as the server being out of addresses in pools     with particular ranges. (ISC-Bugs #26498)

  - In the DDNS code handle error conditions more gracefully     and add more logging code. The major change is to handle     unexpected cancel events from the DNS client code.
    (ISC-Bugs #26287)

  - Tidy up the receive calls and eliminate the need for     found_pkt. (ISC-Bugs #25066)

  - Add support for Infiniband over sockets to the server     and relay code.

  - Modify the code that determines if an outstanding DDNS     request should be cancelled. This patch results in     cancelling the outstanding request less often. It fixes     the problem caused by a client doing a release where the     TXT and PTR records weren't removed from the DNS.
    (ISC-BUGS #27858)

  - Remove outdated note in the description of the bootp     keyword about the option not satisfying the requirement     of failover peers for denying dynamic bootp clients.
    (ISC-bugs #28574)

  - Multiple items to clean up IPv6 address processing. When     processing an IA that we've seen check to see if the     addresses are usable (not in use by somebody else)     before handing it out. When reading in leases from the     file discard expired addresses. When picking an address     for a client include the IA ID in addition to the client     ID to generally pick different addresses for different     IAs. (ISC-Bugs #23138, #27945, #25586, #27684)

  - Remove unnecessary checks in the lease query code and     clean up several compiler issues (some dereferences of     NULL and treating an int as a boolean). (ISC-Bugs     #26203)

  - Fix the NA and PD allocation code to handle the case     where a client provides a preference and the server     doesn't have any addresses or prefixes available.
    Previoulsy the server ignored the request with this     patch it replies with a NoAddrsAvail or NoPrefixAvail     response. By default the code performs according to the     errata of August 2010 for RFC 3315 section 17.2.2; to     enable the previous style see the section on     RFC3315_PRE_ERRATA_2010_08 in includes/site.h.

  - Fix up some issues found by static analysis. A potential     memory leak and NULL dereference in omapi. The use of a     boolean test instead of a bitwise test in dst. (ISC-Bugs     #28941)

In addition, the dhcp-server init script now checks the syntax prior restarting the daemon to avoid stopping of the daemon when a start would fail., last seen: 2019-02-21, modified: 2013-10-25, plugin id: 64122, published: 2013-01-25, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=64122, title: SuSE 11.2 Security Update : dhcp (SAT Patch Number 6606)}, {NASL family: SuSE Local Security Checks, NASL id: OPENSUSE-2012-522.NASL, description: This update of dhcp fixed multiple security vulnerabilities (memory leak, Denial of Service)., last seen: 2019-02-21, modified: 2018-11-10, plugin id: 74718, published: 2014-06-13, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=74718, title: openSUSE Security Update : dhcp (openSUSE-SU-2012:1006-1)}, {NASL family: Gentoo Local Security Checks, NASL id: GENTOO_GLSA-201301-06.NASL, description: The remote host is affected by the vulnerability described in GLSA-201301-06 (ISC DHCP: Denial of Service)

    Multiple vulnerabilities have been discovered in ISC DHCP. Please review       the CVE identifiers referenced below for details.
  Impact :

    The vulnerabilities might allow remote attackers to execute arbitrary       code or cause a Denial of Service.
  Workaround :

    There is no known workaround at this time., last seen: 2019-02-21, modified: 2018-07-11, plugin id: 63440, published: 2013-01-09, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=63440, title: GLSA-201301-06 : ISC DHCP: Denial of Service}], ranking: [[{circl: 3}]], references: [http://lists.opensuse.org/opensuse-updates/2012-08/msg00030.html, http://security.gentoo.org/glsa/glsa-201301-06.xml, http://www.mandriva.com/security/advisories?name=MDVSA-2012:115, http://www.securityfocus.com/bid/54665, https://kb.isc.org/article/AA-00714], refmap: {bid: [54665], confirm: [https://kb.isc.org/article/AA-00714], gentoo: [GLSA-201301-06], mandriva: [MDVSA-2012:115], suse: [openSUSE-SU-2012:1006]}, summary: Buffer overflow in ISC DHCP 4.2.x before 4.2.4-P1, when DHCPv6 mode is enabled, allows remote attackers to cause a denial of service (segmentation fault and daemon exit) via a crafted client identifier parameter., vulnerable_configuration: [{id: cpe:2.3:a:isc:dhcp:4.2.0, title: ISC DHCP 4.2.0}, {id: cpe:2.3:a:isc:dhcp:4.2.0:a1, title: ISC DHCP 4.2.0 A1}, {id: cpe:2.3:a:isc:dhcp:4.2.0:a2, title: ISC DHCP 4.2.0 A2}, {id: cpe:2.3:a:isc:dhcp:4.2.0:b1, title: ISC DHCP 4.2.0 B1}, {id: cpe:2.3:a:isc:dhcp:4.2.0:b2, title: ISC DHCP 4.2.0 B1}, {id: cpe:2.3:a:isc:dhcp:4.2.0:p1, title: ISC DHCP 4.2.0-P1}, {id: cpe:2.3:a:isc:dhcp:4.2.0:rc1, title: ISC DHCP 4.2.0 release candidate 1}, {id: cpe:2.3:a:isc:dhcp:4.2.1, title: ISC DHCP 4.2.1}, {id: cpe:2.3:a:isc:dhcp:4.2.1:b1, title: ISC DHCP 4.2.1 b1}, {id: cpe:2.3:a:isc:dhcp:4.2.1:rc1, title: ISC DHCP 4.2.1 Release Candidate 1}, {id: cpe:2.3:a:isc:dhcp:4.2.2, title: ISC DHCP 4.2.2}, {id: cpe:2.3:a:isc:dhcp:4.2.2:b1, title: ISC DHCP 4.2.2 b1}, {id: cpe:2.3:a:isc:dhcp:4.2.2:rc1, title: ISC DHCP 4.2.2 release candidate 1}, {id: cpe:2.3:a:isc:dhcp:4.2.3, title: ISC DHCP 4.2.3}, {id: cpe:2.3:a:isc:dhcp:4.2.3:p1, title: ISC DHCP 4.2.3-p1}, {id: cpe:2.3:a:isc:dhcp:4.2.3:p2, title: ISC DHCP 4.2.3-p2}, {id: cpe:2.3:a:isc:dhcp:4.2.4, title: ISC DHCP 4.2.4}], vulnerable_configuration_cpe_2_2: [cpe:/a:isc:dhcp:4.2.0, cpe:/a:isc:dhcp:4.2.0:a1, cpe:/a:isc:dhcp:4.2.0:a2, cpe:/a:isc:dhcp:4.2.0:b1, cpe:/a:isc:dhcp:4.2.0:b2, cpe:/a:isc:dhcp:4.2.0:p1, cpe:/a:isc:dhcp:4.2.0:rc1, cpe:/a:isc:dhcp:4.2.1, cpe:/a:isc:dhcp:4.2.1:b1, cpe:/a:isc:dhcp:4.2.1:rc1, cpe:/a:isc:dhcp:4.2.2, cpe:/a:isc:dhcp:4.2.2:b1, cpe:/a:isc:dhcp:4.2.2:rc1, cpe:/a:isc:dhcp:4.2.3, cpe:/a:isc:dhcp:4.2.3:p1, cpe:/a:isc:dhcp:4.2.3:p2, cpe:/a:isc:dhcp:4.2.4]}
