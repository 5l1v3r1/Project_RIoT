{Modified: 2016-01-21T19:26:22.877000, Published: 2016-01-19T00:59:07.560000, access: {authentication: NONE, complexity: LOW, vector: NETWORK}, capec: [{id: 135, name: Format String Injection, prerequisites: The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters., related_weakness: [134, 20, 74, 133], solutions: Limit the usage of formatting string functions.
Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters., summary: An attacker includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An attacker can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the attacker can write to the program stack.}, {id: 67, name: String Format Overflow in syslog(), prerequisites: The format string argument of the Syslog function can be tainted with user supplied data., related_weakness: [120, 134, 74, 20, 680, 697], solutions: The following code shows a vulnerable usage of Syslog():, summary: This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted.}], cvss: 10.0, cvss-time: 2016-01-21T14:13:56.370000, cwe: CWE-134, exploit-db: [{description: PHP 7.0.0 - Format String Vulnerability. CVE-2015-8617. Dos exploits for multiple platform, id: EDB-ID:39082, last seen: 2016-02-04, modified: 2015-12-23, published: 2015-12-23, reporter: Andrew Kramer, source: https://www.exploit-db.com/download/39082/, title: PHP 7.0.0 - Format String Vulnerability}], id: CVE-2015-8617, impact: {availability: COMPLETE, confidentiality: COMPLETE, integrity: COMPLETE}, last-modified: 2017-09-09T21:29:04.717000, nessus: [{NASL family: CGI abuses, NASL id: PHP_7_0_1.NASL, description: According to its banner, the version of PHP running on the remote web server is 7.0.x prior to 7.0.1. It is, therefore, affected by multiple vulnerabilities :

  - A use-after-free error exists in the     collator_sort_with_sort_keys() function due to improper     clearing of pointers when destroying an array. An     unauthenticated, remote attacker can exploit this to     dereference already freed memory, resulting in the     execution of arbitrary code. (CVE-2015-8616)

  - A format string flaw exists in the zend_throw_or_error()     function due to improper sanitization of format string     specifiers (e.g. %s and %x) in user-supplied input. An     unauthenticated, remote attacker can exploit this to     execute arbitrary code. (CVE-2015-8617)

  - A flaw exists in the php_password_make_salt() function     due to a fall back to password salt generation in an     insecure manner when attempts to read random bytes from     the operating system's cryptographically secure     pseudo-random number generator (CSPRING) fail. An     attacker can exploit this to more easily predict the     generated password salt.

Note that Nessus has not tested for these issues but has instead relied only on the application's self-reported version number., last seen: 2019-02-21, modified: 2019-01-02, plugin id: 87599, published: 2015-12-22, reporter: Tenable, source: https://www.tenable.com/plugins/index.php?view=single&id=87599, title: PHP 7.0.x < 7.0.1 Multiple Vulnerabilities}], ranking: [[{circl: 3}]], references: [http://php.net/ChangeLog-7.php, http://www.securitytracker.com/id/1034543, https://bugs.php.net/bug.php?id=71105, https://github.com/php/php-src/commit/b101a6bbd4f2181c360bd38e7683df4a03cba83e], refmap: {confirm: [http://php.net/ChangeLog-7.php, https://bugs.php.net/bug.php?id=71105, https://github.com/php/php-src/commit/b101a6bbd4f2181c360bd38e7683df4a03cba83e], sectrack: [1034543]}, summary: Format string vulnerability in the zend_throw_or_error function in Zend/zend_execute_API.c in PHP 7.x before 7.0.1 allows remote attackers to execute arbitrary code via format string specifiers in a string that is misused as a class name, leading to incorrect error handling., vulnerable_configuration: [{id: cpe:2.3:a:php:php:7.0.1, title: PHP 7.0.1 -}], vulnerable_configuration_cpe_2_2: [cpe:/a:php:php:7.0.1]}
